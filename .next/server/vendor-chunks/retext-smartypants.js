"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/retext-smartypants";
exports.ids = ["vendor-chunks/retext-smartypants"];
exports.modules = {

/***/ "(rsc)/./node_modules/retext-smartypants/index.js":
/*!**************************************************!*\
  !*** ./node_modules/retext-smartypants/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ retextSmartypants)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var nlcst_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nlcst-to-string */ \"(rsc)/./node_modules/nlcst-to-string/lib/index.js\");\n/**\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('nlcst').Sentence} Sentence\n * @typedef {import('nlcst').Word} Word\n * @typedef {import('nlcst').Symbol} Symbol\n * @typedef {import('nlcst').Punctuation} Punctuation\n * @typedef {import('nlcst').SentenceContent} SentenceContent\n *\n * @typedef QuoteCharacterMap\n *   Quote characters.\n * @property {string} double\n *   Character to use for double quotes.\n * @property {string} single\n *   Character to use for single quotes.\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean} [quotes=true]\n *   Create smart quotes.\n *\n *   Converts straight double and single quotes to smart double or single\n *   quotes.\n * @property {QuoteCharacterMap} [openingQuotes]\n *   Characters to use for opening double and single quotes.\n * @property {QuoteCharacterMap} [closingQuotes]\n *   Characters to use for closing double and single quotes.\n * @property {boolean} [ellipses=true]\n *   Create smart ellipses.\n *\n *   Converts triple dot characters (with or without spaces between) into a\n *   single Unicode ellipsis character.\n * @property {boolean|'all'} [backticks=true]\n *   Create smart quotes from backticks.\n *\n *   When `true`, converts double back-ticks into an opening double quote, and\n *   double straight single quotes into a closing double quote.\n *\n *   When `'all'`: does the preceding and converts single back-ticks into an\n *   opening single quote, and a straight single quote into a closing single\n *   smart quote.\n *\n *   Note: Quotes can not be `true` when `backticks` is `'all'`;\n * @property {boolean|'oldschool'|'inverted'} [dashes=true]\n *   Create smart dashes.\n *\n *   When `true`, converts two dashes into an em-dash character.\n *\n *   When `'oldschool'`, converts two dashes into an en-dash, and three dashes\n *   into an em-dash.\n *\n *   When `'inverted'`, converts two dashes into an em-dash, and three dashes\n *   into an en-dash.\n *\n * @callback Method\n * @param {Punctuation|Symbol} node\n * @param {number} index\n * @param {Word|Sentence} parent\n * @returns {void}\n */ \n\nconst defaultClosingQuotes = {\n    '\"': \"”\",\n    \"'\": \"’\"\n};\nconst defaultOpeningQuotes = {\n    '\"': \"“\",\n    \"'\": \"‘\"\n};\n/**\n * @param {Options} options\n */ function createEducators(options) {\n    const closingQuotes = options.closingQuotes ? {\n        '\"': options.closingQuotes.double,\n        \"'\": options.closingQuotes.single\n    } : defaultClosingQuotes;\n    const openingQuotes = options.openingQuotes ? {\n        '\"': options.openingQuotes.double,\n        \"'\": options.openingQuotes.single\n    } : defaultOpeningQuotes;\n    const educators = {\n        dashes: {\n            /**\n       * Transform two dahes into an em-dash.\n       *\n       * @type {Method}\n       */ true (node) {\n                if (node.value === \"--\") {\n                    node.value = \"—\";\n                }\n            },\n            /**\n       * Transform three dahes into an em-dash, and two into an en-dash.\n       *\n       * @type {Method}\n       */ oldschool (node) {\n                if (node.value === \"---\") {\n                    node.value = \"—\";\n                } else if (node.value === \"--\") {\n                    node.value = \"–\";\n                }\n            },\n            /**\n       * Transform three dahes into an en-dash, and two into an em-dash.\n       *\n       * @type {Method}\n       */ inverted (node) {\n                if (node.value === \"---\") {\n                    node.value = \"–\";\n                } else if (node.value === \"--\") {\n                    node.value = \"—\";\n                }\n            }\n        },\n        backticks: {\n            /**\n       * Transform double backticks and single quotes into smart quotes.\n       *\n       * @type {Method}\n       */ true (node) {\n                if (node.value === \"``\") {\n                    node.value = \"“\";\n                } else if (node.value === \"''\") {\n                    node.value = \"”\";\n                }\n            },\n            /**\n       * Transform single and double backticks and single quotes into smart quotes.\n       *\n       * @type {Method}\n       */ all (node, index, parent) {\n                educators.backticks.true(node, index, parent);\n                if (node.value === \"`\") {\n                    node.value = \"‘\";\n                } else if (node.value === \"'\") {\n                    node.value = \"’\";\n                }\n            }\n        },\n        ellipses: {\n            /**\n       * Transform multiple dots into unicode ellipses.\n       *\n       * @type {Method}\n       */ true (node, index, parent) {\n                const value = node.value;\n                const siblings = parent.children;\n                // Simple node with three dots and without white-space.\n                if (/^\\.{3,}$/.test(node.value)) {\n                    node.value = \"…\";\n                    return;\n                }\n                if (!/^\\.+$/.test(value)) {\n                    return;\n                }\n                // Search for dot-nodes with white-space between.\n                /** @type {Array<SentenceContent>} */ const nodes = [];\n                let position = index;\n                let count = 1;\n                // It’s possible that the node is merged with an adjacent word-node.  In that\n                // code, we cannot transform it because there’s no reference to the\n                // grandparent.\n                while(--position > 0){\n                    let sibling = siblings[position];\n                    if (sibling.type !== \"WhiteSpaceNode\") {\n                        break;\n                    }\n                    const queue = sibling;\n                    sibling = siblings[--position];\n                    if (sibling && (sibling.type === \"PunctuationNode\" || sibling.type === \"SymbolNode\") && /^\\.+$/.test(sibling.value)) {\n                        nodes.push(queue, sibling);\n                        count++;\n                        continue;\n                    }\n                    break;\n                }\n                if (count < 3) {\n                    return;\n                }\n                siblings.splice(index - nodes.length, nodes.length);\n                node.value = \"…\";\n            }\n        },\n        quotes: {\n            /**\n       * Transform straight single- and double quotes into smart quotes.\n       *\n       * @type {Method}\n       */ // eslint-disable-next-line complexity\n            true (node, index, parent) {\n                const siblings = parent.children;\n                const value = node.value;\n                if (value !== '\"' && value !== \"'\") {\n                    return;\n                }\n                const previous = siblings[index - 1];\n                const next = siblings[index + 1];\n                const nextNext = siblings[index + 2];\n                const nextValue = next && (0,nlcst_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(next);\n                if (next && nextNext && (next.type === \"PunctuationNode\" || next.type === \"SymbolNode\") && nextNext.type !== \"WordNode\") {\n                    // Special case if the very first character is a quote followed by\n                    // punctuation at a non-word-break. Close the quotes by brute force.\n                    node.value = closingQuotes[value];\n                } else if (nextNext && (nextValue === '\"' || nextValue === \"'\") && nextNext.type === \"WordNode\") {\n                    // Special case for double sets of quotes:\n                    // `He said, \"'Quoted' words in a larger quote.\"`\n                    node.value = openingQuotes[value];\n                    // @ts-expect-error: it’s a literal.\n                    next.value = openingQuotes[nextValue];\n                } else if (next && /^\\d\\ds$/.test(nextValue)) {\n                    // Special case for decade abbreviations: `the '80s`\n                    node.value = closingQuotes[value];\n                } else if (previous && next && (previous.type === \"WhiteSpaceNode\" || previous.type === \"PunctuationNode\" || previous.type === \"SymbolNode\") && next.type === \"WordNode\") {\n                    // Get most opening single quotes.\n                    node.value = openingQuotes[value];\n                } else if (previous && previous.type !== \"WhiteSpaceNode\" && previous.type !== \"SymbolNode\" && previous.type !== \"PunctuationNode\") {\n                    // Closing quotes.\n                    node.value = closingQuotes[value];\n                } else if (!next || next.type === \"WhiteSpaceNode\" || value === \"'\" && nextValue === \"s\") {\n                    node.value = closingQuotes[value];\n                } else {\n                    node.value = openingQuotes[value];\n                }\n            }\n        }\n    };\n    return educators;\n}\n/**\n * Plugin to replace dumb/straight/typewriter punctuation marks with smart/curly\n * punctuation marks.\n *\n * @type {import('unified').Plugin<[Options?]|[], Root>}\n */ function retextSmartypants(options = {}) {\n    /** @type {Array<Method>} */ const methods = [];\n    /** @type {Options['quotes']} */ let quotes;\n    /** @type {Options['ellipses']} */ let ellipses;\n    /** @type {Options['backticks']} */ let backticks;\n    /** @type {Options['dashes']} */ let dashes;\n    if (\"quotes\" in options) {\n        quotes = options.quotes;\n        if (quotes !== Boolean(quotes)) {\n            throw new TypeError(\"Illegal invocation: `\" + quotes + \"` \" + \"is not a valid value for `quotes` in \" + \"`smartypants`\");\n        }\n    } else {\n        quotes = true;\n    }\n    if (\"ellipses\" in options) {\n        ellipses = options.ellipses;\n        if (ellipses !== Boolean(ellipses)) {\n            throw new TypeError(\"Illegal invocation: `\" + ellipses + \"` \" + \"is not a valid value for `ellipses` in \" + \"`smartypants`\");\n        }\n    } else {\n        ellipses = true;\n    }\n    if (\"backticks\" in options) {\n        backticks = options.backticks;\n        if (backticks !== Boolean(backticks) && backticks !== \"all\") {\n            throw new TypeError(\"Illegal invocation: `\" + backticks + \"` \" + \"is not a valid value for `backticks` in \" + \"`smartypants`\");\n        }\n        if (backticks === \"all\" && quotes === true) {\n            throw new TypeError(\"Illegal invocation: `backticks: \" + backticks + \"` is not a valid value \" + \"when `quotes: \" + quotes + \"` in \" + \"`smartypants`\");\n        }\n    } else {\n        backticks = true;\n    }\n    if (\"dashes\" in options) {\n        dashes = options.dashes;\n        if (dashes !== Boolean(dashes) && dashes !== \"oldschool\" && dashes !== \"inverted\") {\n            throw new TypeError(\"Illegal invocation: `\" + dashes + \"` \" + \"is not a valid value for `dahes` in \" + \"`smartypants`\");\n        }\n    } else {\n        dashes = true;\n    }\n    const educators = createEducators(options);\n    if (quotes !== false) {\n        methods.push(educators.quotes.true);\n    }\n    if (ellipses !== false) {\n        methods.push(educators.ellipses.true);\n    }\n    if (backticks !== false) {\n        methods.push(educators.backticks[backticks === true ? \"true\" : backticks]);\n    }\n    if (dashes !== false) {\n        methods.push(educators.dashes[dashes === true ? \"true\" : dashes]);\n    }\n    return (tree)=>{\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, (node, position, parent)=>{\n            let index = -1;\n            if (node.type === \"PunctuationNode\" || node.type === \"SymbolNode\") {\n                while(++index < methods.length){\n                    // @ts-expect-error: they’re literals.\n                    methods[index](node, position, parent);\n                }\n            }\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/retext-smartypants/index.js\n");

/***/ })

};
;