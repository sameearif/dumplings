"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-from-parse5";
exports.ids = ["vendor-chunks/hast-util-from-parse5"];
exports.modules = {

/***/ "(rsc)/./node_modules/hast-util-from-parse5/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/hast-util-from-parse5/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromParse5: () => (/* binding */ fromParse5)\n/* harmony export */ });\n/* harmony import */ var hastscript__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hastscript */ \"(rsc)/./node_modules/hastscript/lib/svg.js\");\n/* harmony import */ var hastscript__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hastscript */ \"(rsc)/./node_modules/hastscript/lib/html.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! property-information */ \"(rsc)/./node_modules/property-information/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! property-information */ \"(rsc)/./node_modules/property-information/lib/find.js\");\n/* harmony import */ var vfile_location__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vfile-location */ \"(rsc)/./node_modules/vfile-location/lib/index.js\");\n/* harmony import */ var web_namespaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web-namespaces */ \"(rsc)/./node_modules/web-namespaces/index.js\");\n/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {import('parse5').Token.ElementLocation} P5ElementLocation\n * @typedef {import('parse5').Token.Location} P5Location\n */ /**\n * @typedef {Content | Root} Node\n * @typedef {DefaultTreeAdapterMap['document']} P5Document\n * @typedef {DefaultTreeAdapterMap['documentFragment']} P5DocumentFragment\n * @typedef {DefaultTreeAdapterMap['documentType']} P5DocumentType\n * @typedef {DefaultTreeAdapterMap['commentNode']} P5Comment\n * @typedef {DefaultTreeAdapterMap['textNode']} P5Text\n * @typedef {DefaultTreeAdapterMap['element']} P5Element\n * @typedef {DefaultTreeAdapterMap['node']} P5Node\n * @typedef {DefaultTreeAdapterMap['template']} P5Template\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in.\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {VFile | null | undefined} [file]\n *   File used to add positional info to nodes.\n *\n *   If given, the file should represent the original HTML source.\n * @property {boolean} [verbose=false]\n *   Whether to add extra positional info about starting tags, closing tags,\n *   and attributes to elements.\n *\n *   > ðŸ‘‰ **Note**: only used when `file` is given.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {Schema} schema\n *   Current schema.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n * @property {boolean} location\n *   Whether location info was found.\n */ \n\n\n\nconst own = {}.hasOwnProperty;\n/** @type {unknown} */ // type-coverage:ignore-next-line\nconst proto = Object.prototype;\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {P5Node} tree\n *   `parse5` tree to transform.\n * @param {Options | VFile | null | undefined} [options]\n *   Configuration.\n * @returns {Node}\n *   hast tree.\n */ function fromParse5(tree, options) {\n    const options_ = options || {};\n    /** @type {Options} */ let settings;\n    /** @type {VFile | undefined} */ let file;\n    if (isFile(options_)) {\n        file = options_;\n        settings = {};\n    } else {\n        file = options_.file || undefined;\n        settings = options_;\n    }\n    return one({\n        schema: settings.space === \"svg\" ? property_information__WEBPACK_IMPORTED_MODULE_0__.svg : property_information__WEBPACK_IMPORTED_MODULE_0__.html,\n        file,\n        verbose: settings.verbose,\n        location: false\n    }, tree);\n}\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Node} node\n *   p5 node.\n * @returns {Node}\n *   hast node.\n */ function one(state, node) {\n    /** @type {Node} */ let result;\n    switch(node.nodeName){\n        case \"#comment\":\n            {\n                const reference = /** @type {P5Comment} */ node;\n                result = {\n                    type: \"comment\",\n                    value: reference.data\n                };\n                patch(state, reference, result);\n                return result;\n            }\n        case \"#document\":\n        case \"#document-fragment\":\n            {\n                const reference = /** @type {P5Document | P5DocumentFragment} */ node;\n                const quirksMode = \"mode\" in reference ? reference.mode === \"quirks\" || reference.mode === \"limited-quirks\" : false;\n                result = {\n                    type: \"root\",\n                    children: all(state, node.childNodes),\n                    data: {\n                        quirksMode\n                    }\n                };\n                if (state.file && state.location) {\n                    const doc = String(state.file);\n                    const loc = (0,vfile_location__WEBPACK_IMPORTED_MODULE_1__.location)(doc);\n                    const start = loc.toPoint(0);\n                    const end = loc.toPoint(doc.length);\n                    // @ts-expect-error: always defined as we give valid input.\n                    result.position = {\n                        start,\n                        end\n                    };\n                }\n                return result;\n            }\n        case \"#documentType\":\n            {\n                const reference = /** @type {P5DocumentType} */ node;\n                // @ts-expect-error Types are out of date.\n                result = {\n                    type: \"doctype\"\n                };\n                patch(state, reference, result);\n                return result;\n            }\n        case \"#text\":\n            {\n                const reference = /** @type {P5Text} */ node;\n                result = {\n                    type: \"text\",\n                    value: reference.value\n                };\n                patch(state, reference, result);\n                return result;\n            }\n        // Element.\n        default:\n            {\n                const reference = /** @type {P5Element} */ node;\n                result = element(state, reference);\n                return result;\n            }\n    }\n}\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<P5Node>} nodes\n *   Nodes.\n * @returns {Array<Content>}\n *   hast nodes.\n */ function all(state, nodes) {\n    let index = -1;\n    /** @type {Array<Content>} */ const result = [];\n    while(++index < nodes.length){\n        // @ts-expect-error Assume no roots in `nodes`.\n        result[index] = one(state, nodes[index]);\n    }\n    return result;\n}\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Element} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */ function element(state, node) {\n    const schema = state.schema;\n    state.schema = node.namespaceURI === web_namespaces__WEBPACK_IMPORTED_MODULE_2__.webNamespaces.svg ? property_information__WEBPACK_IMPORTED_MODULE_0__.svg : property_information__WEBPACK_IMPORTED_MODULE_0__.html;\n    // Props.\n    let index = -1;\n    /** @type {Record<string, string>} */ const props = {};\n    while(++index < node.attrs.length){\n        const attribute = node.attrs[index];\n        const name = (attribute.prefix ? attribute.prefix + \":\" : \"\") + attribute.name;\n        if (!own.call(proto, name)) {\n            props[name] = attribute.value;\n        }\n    }\n    // Build.\n    const fn = state.schema.space === \"svg\" ? hastscript__WEBPACK_IMPORTED_MODULE_3__.s : hastscript__WEBPACK_IMPORTED_MODULE_4__.h;\n    const result = fn(node.tagName, props, all(state, node.childNodes));\n    patch(state, node, result);\n    // Switch content.\n    if (result.tagName === \"template\") {\n        const reference = /** @type {P5Template} */ node;\n        const pos = reference.sourceCodeLocation;\n        const startTag = pos && pos.startTag && position(pos.startTag);\n        const endTag = pos && pos.endTag && position(pos.endTag);\n        /** @type {Root} */ // @ts-expect-error Types are wrong.\n        const content = one(state, reference.content);\n        if (startTag && endTag && state.file) {\n            content.position = {\n                start: startTag.end,\n                end: endTag.start\n            };\n        }\n        result.content = content;\n    }\n    state.schema = schema;\n    return result;\n}\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Node} from\n *   p5 node.\n * @param {Node} to\n *   hast node.\n * @returns {void}\n *   Nothing.\n */ function patch(state, from, to) {\n    if (\"sourceCodeLocation\" in from && from.sourceCodeLocation && state.file) {\n        const position = createLocation(state, to, from.sourceCodeLocation);\n        if (position) {\n            state.location = true;\n            to.position = position;\n        }\n    }\n}\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Node} node\n *   hast node.\n * @param {P5ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */ function createLocation(state, node, location) {\n    const result = position(location);\n    if (node.type === \"element\") {\n        const tail = node.children[node.children.length - 1];\n        // Bug for unclosed with children.\n        // See: <https://github.com/inikulin/parse5/issues/109>.\n        if (result && !location.endTag && tail && tail.position && tail.position.end) {\n            result.end = Object.assign({}, tail.position.end);\n        }\n        if (state.verbose) {\n            /** @type {Record<string, Position | undefined>} */ const props = {};\n            /** @type {string} */ let key;\n            if (location.attrs) {\n                for(key in location.attrs){\n                    if (own.call(location.attrs, key)) {\n                        props[(0,property_information__WEBPACK_IMPORTED_MODULE_5__.find)(state.schema, key).property] = position(location.attrs[key]);\n                    }\n                }\n            }\n            node.data = {\n                position: {\n                    // @ts-expect-error: assume not `undefined`.\n                    opening: position(location.startTag),\n                    closing: location.endTag ? position(location.endTag) : null,\n                    properties: props\n                }\n            };\n        }\n    }\n    return result;\n}\n/**\n * Turn a p5 location into a position.\n *\n * @param {P5Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */ function position(loc) {\n    const start = point({\n        line: loc.startLine,\n        column: loc.startCol,\n        offset: loc.startOffset\n    });\n    const end = point({\n        line: loc.endLine,\n        column: loc.endCol,\n        offset: loc.endOffset\n    });\n    // @ts-expect-error `undefined` is fine.\n    return start || end ? {\n        start,\n        end\n    } : undefined;\n}\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */ function point(point) {\n    return point.line && point.column ? point : undefined;\n}\n/**\n * Check if something is a file.\n *\n * @param {VFile | Options} value\n *   File or options.\n * @returns {value is VFile}\n *   Whether `value` is a file.\n */ function isFile(value) {\n    return \"messages\" in value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hast-util-from-parse5/lib/index.js\n");

/***/ })

};
;