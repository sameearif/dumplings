"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rehype-pretty-code";
exports.ids = ["vendor-chunks/rehype-pretty-code"];
exports.modules = {

/***/ "(rsc)/./node_modules/rehype-pretty-code/dist/rehype-pretty-code.js":
/*!********************************************************************!*\
  !*** ./node_modules/rehype-pretty-code/dist/rehype-pretty-code.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rehypePrettyCode)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var parse_numeric_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse-numeric-range */ \"(rsc)/./node_modules/parse-numeric-range/index.js\");\n/* harmony import */ var shiki__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shiki */ \"shiki\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unified */ \"(rsc)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var rehype_parse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rehype-parse */ \"(rsc)/./node_modules/rehype-parse/lib/index.js\");\n/* harmony import */ var hash_obj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hash-obj */ \"(rsc)/./node_modules/hash-obj/index.js\");\n/* harmony import */ var hast_util_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hast-util-to-string */ \"(rsc)/./node_modules/hast-util-to-string/index.js\");\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isShikiTheme(value) {\n    return value ? hasOwnProperty(value, \"tokenColors\") : false;\n}\nfunction isElement(value) {\n    return value ? value.type === \"element\" : false;\n}\nfunction isText(value) {\n    return value ? value.type === \"text\" : false;\n}\nfunction hasOwnProperty(object, string) {\n    return ({}).hasOwnProperty.call(object, string);\n}\nfunction splitElement({ elements, elementToWrap, innerString, rightString, leftString, rest, nextElementContinues, index, ignoreChars }) {\n    if (isElement(elementToWrap) && elementToWrap.children?.[0]?.type !== \"text\" || ignoreChars) {\n        return [\n            elementToWrap,\n            index\n        ];\n    }\n    let newIndex = index;\n    // assign the matched value to the current element\n    const textElement = elementToWrap.children[0];\n    if (isText(textElement)) {\n        textElement.value = innerString;\n    }\n    let rightStr = rightString;\n    const leftStr = leftString;\n    // append any repetitions to the right if necessary\n    if (rest.length > 0) {\n        rightStr += rest.map((s)=>s === \"\" ? innerString : innerString + s).join(\"\");\n    }\n    if (leftStr.length > 0) {\n        elements.splice(newIndex, 0, {\n            ...elementToWrap,\n            properties: {\n                ...elementToWrap.properties\n            },\n            children: [\n                {\n                    type: \"text\",\n                    value: leftStr\n                }\n            ]\n        });\n    }\n    if (rightStr.length > 0 && !nextElementContinues) {\n        newIndex = leftStr.length > 0 ? newIndex + 2 : newIndex + 1;\n        elements.splice(newIndex, 0, {\n            ...elementToWrap,\n            properties: {\n                ...elementToWrap.properties\n            },\n            children: [\n                {\n                    type: \"text\",\n                    value: rightStr\n                }\n            ]\n        });\n    }\n    return [\n        elementToWrap,\n        index + 1\n    ];\n}\n/**\n * Look ahead to determine if further, sibling nodes continue the string.\n */ function nextElementMaybeContinuesChars({ elements, nextIndex, remainingPart }) {\n    if (remainingPart === \"\") {\n        return false;\n    }\n    const nextNode = elements[nextIndex];\n    const content = getContent(nextNode);\n    if (!content) {\n        return false;\n    }\n    const includesNext = content.startsWith(remainingPart) || remainingPart.startsWith(content);\n    const overlap = findOverlap(content, remainingPart);\n    if (overlap === remainingPart && content.startsWith(remainingPart)) {\n        return true;\n    }\n    if (includesNext) {\n        return nextElementMaybeContinuesChars({\n            elements,\n            nextIndex: nextIndex + 1,\n            remainingPart: remainingPart.replace(content, \"\")\n        });\n    }\n    return false;\n}\nfunction getContent(node) {\n    if (!node) return;\n    return (0,hast_util_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(node);\n}\nfunction findOverlap(a, b) {\n    if (b.length === 0) {\n        return \"\";\n    }\n    if (a.endsWith(b)) {\n        return b;\n    }\n    if (a.indexOf(b) >= 0) {\n        return b;\n    }\n    return findOverlap(a, b.substring(0, b.length - 1));\n}\nfunction reverseString(s) {\n    return s.split(\"\").reverse().join(\"\");\n}\nfunction getElementsToHighlight(element, chars, startIndex = 0, ignoreChars = false) {\n    const toWrap = [];\n    let charsSoFar = \"\";\n    if (element.children) {\n        const elements = element.children;\n        for(let i = startIndex; i < elements.length; i++){\n            const remaining = charsSoFar ? chars.replace(charsSoFar, \"\") : chars;\n            if (remaining === \"\") {\n                return toWrap;\n            }\n            const maybeElement = elements[i];\n            if (!maybeElement || maybeElement.type !== \"element\" || // ignore any previously matched chars within\n            hasOwnProperty(maybeElement.properties ?? {}, \"rehype-pretty-code-visited\")) {\n                continue;\n            }\n            const content = getContent(maybeElement) || \"\";\n            // node is the chars, or it finishes the chars\n            if (content === chars || charsSoFar + content === chars) {\n                toWrap.push({\n                    element: maybeElement,\n                    index: i\n                });\n                return toWrap;\n            }\n            // check if the whole node is a continuation of the chars\n            if (chars.startsWith(charsSoFar + content)) {\n                // make sure we continue here only if further siblings\n                // complete the chars. Otherwise an earlier repetition\n                // of a section of the chars will lead us down the wrong path\n                if (nextElementMaybeContinuesChars({\n                    elements,\n                    nextIndex: i + 1,\n                    remainingPart: remaining.replace(content, \"\")\n                })) {\n                    toWrap.push({\n                        element: elements[i],\n                        index: i\n                    });\n                    charsSoFar += content;\n                    continue;\n                }\n            }\n            const overlap = findOverlap(content, remaining);\n            const partialMatch = overlap && remaining.startsWith(overlap);\n            if (partialMatch) {\n                const nextPart = remaining.replace(overlap, \"\");\n                // this is the wrong node, continue\n                if (nextPart !== \"\" && getContent(elements[i + 1]) && !nextElementMaybeContinuesChars({\n                    elements,\n                    nextIndex: i + 1,\n                    remainingPart: nextPart\n                })) {\n                    continue;\n                }\n                const splitParts = content.split(overlap);\n                const [leftPart, rightPart, ...rest] = splitParts;\n                if (rightPart || leftPart || rest.length > 0) {\n                    // One of the below scenarios should be true\n                    // 1. the whole set of chars are inside the string (at least once) ca[rro]t\n                    // 2. the chars finish or start & end on the beginning of the string ...[carr]ot\n                    // 3. the chars start or start & end from the end of the string carr[ot]...\n                    const withNextNode = content + (getContent(elements[i + 1]) ? getContent(elements[i + 1]) : \"\");\n                    const nextNodeOverlap = findOverlap(withNextNode, remaining);\n                    const splitIndex = withNextNode.indexOf(nextNodeOverlap);\n                    if (chars.endsWith(overlap) || chars.startsWith(overlap)) {\n                        const rightString = rightPart.replace(overlap, \"\");\n                        const innerString = overlap;\n                        const leftString = content.substring(0, splitIndex);\n                        // need to check this to avoid edge case where the right\n                        // side will be duplicated when the matched part repeats within the\n                        // current node\n                        const nextElementContinues = nextElementMaybeContinuesChars({\n                            elements,\n                            nextIndex: i + 1,\n                            remainingPart: nextPart\n                        });\n                        const [newElement, updatedIndex] = splitElement({\n                            elements,\n                            elementToWrap: elements[i],\n                            innerString,\n                            rightString,\n                            leftString,\n                            rest,\n                            nextElementContinues,\n                            index: i,\n                            ignoreChars\n                        });\n                        charsSoFar += overlap;\n                        toWrap.push({\n                            element: newElement,\n                            index: updatedIndex\n                        });\n                    }\n                }\n            }\n        }\n    }\n    return toWrap;\n}\nfunction wrapHighlightedChars(parentElement, elementsToWrap, options, ignoreWord, onVisitHighlightedChars) {\n    if (!elementsToWrap || elementsToWrap.length === 0) {\n        return;\n    }\n    const [{ element }] = elementsToWrap;\n    if (ignoreWord) {\n        if (element.properties) {\n            element.properties[\"rehype-pretty-code-visited\"] = \"\";\n        }\n        return;\n    }\n    if (elementsToWrap.length > 1) {\n        parentElement.children.splice(elementsToWrap[0].index, elementsToWrap.length, {\n            type: \"element\",\n            tagName: \"span\",\n            properties: {\n                \"data-highlighted-chars-wrapper\": \"\"\n            },\n            children: elementsToWrap.map(({ element })=>element)\n        });\n        const element = parentElement.children[elementsToWrap[0].index];\n        if (!isElement(element)) {\n            return;\n        }\n        const wordStr = element.children.reduce((acc, node)=>{\n            const textElement = isElement(node) ? node.children[0] : null;\n            if (isText(textElement)) {\n                return acc + textElement.value;\n            }\n            return acc;\n        }, \"\");\n        const id = options.idsMap.get(wordStr);\n        element.properties = element.properties || {};\n        element.properties[\"data-highlighted-chars\"] = \"\";\n        element.properties[\"data-chars-id\"] = id;\n        onVisitHighlightedChars?.(element, id);\n    } else {\n        const [{ element }] = elementsToWrap;\n        const textElement = element.children[0];\n        if (!isText(textElement)) {\n            return;\n        }\n        const id = options.idsMap.get(textElement.value);\n        element.properties = element.properties || {};\n        // used to skip already parsed chars\n        element.properties[\"rehype-pretty-code-visited\"] = \"\";\n        element.properties[\"data-highlighted-chars\"] = \"\";\n        element.properties[\"data-chars-id\"] = id;\n        onVisitHighlightedChars?.(element, id);\n    }\n}\n/**\n * Loops through the child nodes and finds the nodes that make up the chars.\n * If the chars cross node boundaries, those nodes are wrapped with\n * <span data-highlighted-chars-wrapper>, and that node is passed to\n * onVisitHighlightedChars.\n *\n * If a node partially matches the chars, its content is replaced with the\n * matched part, and the left and/or right parts are cloned to sibling nodes.\n */ function charsHighlighter(element, charsList, options, onVisitHighlightedChars) {\n    const { ranges = [] } = options;\n    const textContent = (0,hast_util_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(element);\n    charsList.forEach((chars, index)=>{\n        if (chars && textContent?.includes(chars)) {\n            let textContent = (0,hast_util_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(element);\n            let startIndex = 0;\n            while(textContent.includes(chars)){\n                const currentCharsRange = ranges[index] || [];\n                const id = `${chars}-${index}`;\n                options.counterMap.set(id, (options.counterMap.get(id) || 0) + 1);\n                const ignoreChars = currentCharsRange.length > 0 && !currentCharsRange.includes(options.counterMap.get(id) ?? -1);\n                const elementsToWrap = getElementsToHighlight(element, chars, startIndex, ignoreChars);\n                // maybe throw / notify due to failure here\n                if (elementsToWrap.length === 0) break;\n                wrapHighlightedChars(element, elementsToWrap, options, ignoreChars, onVisitHighlightedChars);\n                // re-start from the 'last' node (the chars or part of them may exist\n                // multiple times in the same node)\n                // account for possible extra nodes added from split with - 2\n                startIndex = Math.max(elementsToWrap[elementsToWrap.length - 1].index - 2, 0);\n                textContent = element.children.map((childNode)=>{\n                    const props = isElement(childNode) ? childNode.properties : {};\n                    if (props && !hasOwnProperty(props, \"rehype-pretty-code-visited\") && !hasOwnProperty(props, \"data-highlighted-chars-wrapper\")) {\n                        return (0,hast_util_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(childNode);\n                    }\n                }).join(\"\");\n            }\n        }\n        element.children.forEach((childNode)=>{\n            if (!isElement(childNode)) {\n                return;\n            }\n            if (hasOwnProperty(childNode.properties ?? {}, \"rehype-pretty-code-visited\")) {\n                if (childNode.properties) {\n                    delete childNode.properties[\"rehype-pretty-code-visited\"];\n                }\n            }\n        });\n    });\n}\nfunction toFragment(element, { trees, lang, title, caption, inline = false, keepBackground = true, grid = true, lineNumbersMaxDigits = 1, onVisitTitle, onVisitCaption }) {\n    element.tagName = inline ? \"span\" : \"div\";\n    // User can replace this with a real Fragment at runtime\n    element.properties = {\n        \"data-rehype-pretty-code-fragment\": \"\"\n    };\n    element.children = Object.entries(trees).map(([mode, tree])=>{\n        const pre = tree.children[0];\n        if (!isElement(pre) || !pre.properties) {\n            return [];\n        }\n        const code = pre.children[0];\n        // Remove class=\"shiki\"\n        if (Array.isArray(pre.properties?.className) && pre.properties?.className.includes(\"shiki\")) {\n            const className = pre.properties.className.filter((c)=>c !== \"shiki\");\n            pre.properties.className = className.length > 0 ? className : undefined;\n        }\n        if (!keepBackground) {\n            pre.properties.style = undefined;\n        }\n        pre.properties[\"data-language\"] = lang;\n        pre.properties[\"data-theme\"] = mode;\n        if (!isElement(code) || !code.properties) {\n            return [];\n        }\n        code.properties[\"data-language\"] = lang;\n        code.properties[\"data-theme\"] = mode;\n        if (inline) {\n            if (keepBackground) {\n                code.properties.style = pre.properties.style;\n            }\n            return code;\n        }\n        if (grid) {\n            if (code.properties.style) {\n                code.properties.style += \"display: grid;\";\n            } else {\n                code.properties.style = \"display: grid;\";\n            }\n        }\n        if (\"data-line-numbers\" in code.properties) {\n            code.properties[\"data-line-numbers-max-digits\"] = lineNumbersMaxDigits.toString().length;\n        }\n        const fragments = [];\n        if (title) {\n            const elementContent = {\n                type: \"element\",\n                tagName: \"div\",\n                properties: {\n                    \"data-rehype-pretty-code-title\": \"\",\n                    \"data-language\": lang,\n                    \"data-theme\": mode\n                },\n                children: [\n                    {\n                        type: \"text\",\n                        value: title\n                    }\n                ]\n            };\n            onVisitTitle?.(elementContent);\n            fragments.push(elementContent);\n        }\n        fragments.push(pre);\n        if (caption) {\n            const elementContent = {\n                type: \"element\",\n                tagName: \"div\",\n                properties: {\n                    \"data-rehype-pretty-code-caption\": \"\",\n                    \"data-language\": lang,\n                    \"data-theme\": mode\n                },\n                children: [\n                    {\n                        type: \"text\",\n                        value: caption\n                    }\n                ]\n            };\n            onVisitCaption?.(elementContent);\n            fragments.push(elementContent);\n        }\n        return fragments;\n    }).flatMap((c)=>c);\n}\nconst globalHighlighterCache = new Map();\nconst hastParser = (0,unified__WEBPACK_IMPORTED_MODULE_4__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n    fragment: true\n});\nfunction rehypePrettyCode(options = {}) {\n    const { grid = true, theme = \"github-dark-dimmed\", keepBackground = true, defaultLang = \"\", tokensMap = {}, filterMetaString = (v)=>v, getHighlighter: getHighlighter$1 = shiki__WEBPACK_IMPORTED_MODULE_1__.getHighlighter, onVisitLine, onVisitHighlightedLine, onVisitHighlightedChars, onVisitTitle, onVisitCaption } = options;\n    const optionsHash = (0,hash_obj__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n        theme,\n        tokensMap,\n        onVisitLine,\n        onVisitHighlightedLine,\n        onVisitHighlightedChars,\n        getHighlighter: getHighlighter$1\n    }, {\n        algorithm: \"sha1\"\n    });\n    let highlighterCache = globalHighlighterCache.get(optionsHash);\n    if (!highlighterCache) {\n        highlighterCache = new Map();\n        globalHighlighterCache.set(optionsHash, highlighterCache);\n    }\n    const highlighters = new Map();\n    const defaultCodeBlockLang = typeof defaultLang === \"string\" ? defaultLang : defaultLang.block || \"\";\n    const defaultInlineCodeLang = typeof defaultLang === \"string\" ? defaultLang : defaultLang.inline || \"\";\n    if (theme == null || typeof theme === \"string\" || isShikiTheme(theme)) {\n        if (!highlighterCache.has(\"default\")) {\n            highlighterCache.set(\"default\", getHighlighter$1({\n                theme\n            }));\n        }\n    } else if (typeof theme === \"object\") {\n        // color mode object\n        for (const [mode, value] of Object.entries(theme)){\n            if (!highlighterCache.has(mode)) {\n                highlighterCache.set(mode, getHighlighter$1({\n                    theme: value\n                }));\n            }\n        }\n    }\n    return async (tree)=>{\n        if (!highlighterCache) return;\n        for (const [mode, loadHighlighter] of highlighterCache.entries()){\n            if (!highlighters.get(mode)) {\n                highlighters.set(mode, await loadHighlighter);\n            }\n        }\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_6__.visit)(tree, \"element\", (element, index, parent)=>{\n            // Inline code\n            if (element.tagName === \"code\" && isElement(parent) && parent.tagName !== \"pre\" || element.tagName === \"inlineCode\") {\n                const textElement = element.children[0];\n                if (!isText(textElement)) {\n                    return;\n                }\n                const value = textElement.value;\n                if (!value) {\n                    return;\n                }\n                // TODO: allow escape characters to break out of highlighting\n                const strippedValue = value.replace(/{:[a-zA-Z.-]+}/, \"\");\n                const meta = value.match(/{:([a-zA-Z.-]+)}$/)?.[1] || defaultInlineCodeLang;\n                if (!meta) {\n                    return;\n                }\n                const isLang = meta[0] !== \".\";\n                const trees = {};\n                for (const [mode, highlighter] of highlighters.entries()){\n                    if (!isLang || meta === \"ansi\" && !highlighter.ansiToHtml) {\n                        const color = highlighter.getTheme().settings.find(({ scope })=>scope?.includes(tokensMap[meta.slice(1)] ?? meta.slice(1)))?.settings.foreground ?? \"inherit\";\n                        trees[mode] = hastParser.parse(`<pre><code><span style=\"color:${color}\">${strippedValue}</span></code></pre>`);\n                    } else {\n                        let html;\n                        if (meta === \"ansi\") {\n                            html = highlighter.ansiToHtml(strippedValue);\n                        } else {\n                            html = highlighter.codeToHtml(strippedValue, meta);\n                        }\n                        trees[mode] = hastParser.parse(html);\n                    }\n                }\n                toFragment(element, {\n                    trees,\n                    lang: isLang ? meta : \".token\",\n                    inline: true,\n                    keepBackground\n                });\n            }\n            if (// Block code\n            // Check from https://github.com/leafac/rehype-shiki\n            element.tagName === \"pre\" && Array.isArray(element.children) && element.children.length === 1 && isElement(element.children[0]) && element.children[0].tagName === \"code\") {\n                const codeElement = element.children[0];\n                const textElement = codeElement.children[0];\n                if (!isElement(codeElement)) {\n                    return;\n                }\n                let lang = defaultCodeBlockLang;\n                if (codeElement.properties && Array.isArray(codeElement.properties.className) && typeof codeElement.properties.className[0] === \"string\" && codeElement.properties.className[0].startsWith(\"language-\")) {\n                    lang = codeElement.properties.className[0].replace(\"language-\", \"\");\n                }\n                const metastring = codeElement.data?.meta ?? codeElement.properties?.metastring ?? \"\";\n                let meta = filterMetaString(metastring);\n                const titleMatch = meta.match(/title=\"([^\"]*)\"/);\n                const title = titleMatch?.[1] ?? null;\n                meta = meta.replace(titleMatch?.[0] ?? \"\", \"\");\n                const captionMatch = meta.match(/caption=\"([^\"]*)\"/);\n                const caption = captionMatch?.[1] ?? null;\n                meta = meta.replace(captionMatch?.[0] ?? \"\", \"\");\n                const lineNumbers = meta ? parse_numeric_range__WEBPACK_IMPORTED_MODULE_0__(meta.match(/(?:^|\\s){(.*?)}/)?.[1] ?? \"\") : [];\n                let lineNumbersMaxDigits = 0;\n                const words = [];\n                const wordNumbers = [];\n                const wordIdsMap = new Map();\n                const wordMatches = meta ? [\n                    ...meta.matchAll(/\\/(.*?)\\/(\\S*)/g)\n                ] : undefined;\n                if (Array.isArray(wordMatches)) {\n                    wordMatches.forEach((_, index)=>{\n                        const word = wordMatches[index][1];\n                        const wordIdAndOrRange = wordMatches[index][2];\n                        words.push(word);\n                        const [range, id] = wordIdAndOrRange.split(\"#\");\n                        if (range) {\n                            wordNumbers.push(parse_numeric_range__WEBPACK_IMPORTED_MODULE_0__(range));\n                        }\n                        if (id) {\n                            wordIdsMap.set(word, id);\n                        }\n                    });\n                }\n                if (!isText(textElement)) {\n                    return;\n                }\n                const strippedValue = textElement.value.replace(/\\n$/, \"\");\n                const trees = {};\n                for (const [mode, highlighter] of highlighters.entries()){\n                    try {\n                        let html;\n                        if (lang === \"ansi\" && highlighter.ansiToHtml) {\n                            html = highlighter.ansiToHtml(strippedValue);\n                        } else {\n                            html = highlighter.codeToHtml(strippedValue, lang);\n                        }\n                        trees[mode] = hastParser.parse(html);\n                    } catch (e) {\n                        // Fallback to plain text if a language has not been registered\n                        trees[mode] = hastParser.parse(highlighter.codeToHtml(strippedValue, \"txt\"));\n                    }\n                }\n                Object.entries(trees).forEach(([, tree])=>{\n                    let lineCounter = 0;\n                    const wordOptions = {\n                        ranges: wordNumbers,\n                        idsMap: wordIdsMap,\n                        counterMap: new Map()\n                    };\n                    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_6__.visit)(tree, \"element\", (element)=>{\n                        if (element.tagName === \"code\" && /srebmuNeniLwohs(?!(.*)(\\/))/.test(reverseString(meta))) {\n                            if (element.properties) {\n                                element.properties[\"data-line-numbers\"] = \"\";\n                            }\n                            const lineNumbersStartAtMatch = reverseString(meta).match(/(?:\\}(\\d+){)?srebmuNeniLwohs(?!(.*)(\\/))/);\n                            const startNumberString = lineNumbersStartAtMatch?.[1];\n                            if (startNumberString) {\n                                const startAt = startNumberString ? Number(reverseString(startNumberString)) - 1 : 0;\n                                lineNumbersMaxDigits = startAt;\n                                if (element.properties) {\n                                    element.properties.style = `counter-set: line ${startAt};`;\n                                }\n                            }\n                        }\n                        if (Array.isArray(element.properties?.className) && element.properties?.className?.[0] === \"line\") {\n                            if (grid && element.children.length === 0) {\n                                element.children = [\n                                    {\n                                        type: \"text\",\n                                        value: \" \"\n                                    }\n                                ];\n                            }\n                            const className = element.properties.className.filter((c)=>c !== \"line\");\n                            element.properties.className = className.length > 0 ? className : undefined;\n                            element.properties[\"data-line\"] = \"\";\n                            onVisitLine?.(element);\n                            if (lineNumbers.length !== 0 && lineNumbers.includes(++lineCounter)) {\n                                element.properties[\"data-highlighted-line\"] = \"\";\n                                onVisitHighlightedLine?.(element);\n                            }\n                            charsHighlighter(element, words, wordOptions, onVisitHighlightedChars);\n                            lineNumbersMaxDigits++;\n                        }\n                    });\n                });\n                toFragment(element, {\n                    trees,\n                    lang,\n                    title,\n                    caption,\n                    keepBackground,\n                    grid,\n                    lineNumbersMaxDigits,\n                    onVisitTitle,\n                    onVisitCaption\n                });\n            }\n        });\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rehype-pretty-code/dist/rehype-pretty-code.js\n");

/***/ })

};
;