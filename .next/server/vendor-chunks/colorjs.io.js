"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/colorjs.io";
exports.ids = ["vendor-chunks/colorjs.io"];
exports.modules = {

/***/ "(rsc)/./node_modules/colorjs.io/dist/color.js":
/*!***********************************************!*\
  !*** ./node_modules/colorjs.io/dist/color.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Color)\n/* harmony export */ });\n// A is m x n. B is n x p. product is m x p.\nfunction multiplyMatrices(A, B) {\n    let m = A.length;\n    if (!Array.isArray(A[0])) {\n        // A is vector, convert to [[a, b, c, ...]]\n        A = [\n            A\n        ];\n    }\n    if (!Array.isArray(B[0])) {\n        // B is vector, convert to [[a], [b], [c], ...]]\n        B = B.map((x)=>[\n                x\n            ]);\n    }\n    let p = B[0].length;\n    let B_cols = B[0].map((_, i)=>B.map((x)=>x[i])); // transpose B\n    let product = A.map((row)=>B_cols.map((col)=>{\n            let ret = 0;\n            if (!Array.isArray(row)) {\n                for (let c of col){\n                    ret += row * c;\n                }\n                return ret;\n            }\n            for(let i = 0; i < row.length; i++){\n                ret += row[i] * (col[i] || 0);\n            }\n            return ret;\n        }));\n    if (m === 1) {\n        product = product[0]; // Avoid [[a, b, c, ...]]\n    }\n    if (p === 1) {\n        return product.map((x)=>x[0]); // Avoid [[a], [b], [c], ...]]\n    }\n    return product;\n}\n/**\n * Various utility functions\n */ /**\n * Check if a value is a string (including a String object)\n * @param {*} str - Value to check\n * @returns {boolean}\n */ function isString(str) {\n    return type(str) === \"string\";\n}\n/**\n * Determine the internal JavaScript [[Class]] of an object.\n * @param {*} o - Value to check\n * @returns {string}\n */ function type(o) {\n    let str = Object.prototype.toString.call(o);\n    return (str.match(/^\\[object\\s+(.*?)\\]$/)[1] || \"\").toLowerCase();\n}\n/**\n * Round a number to a certain number of significant digits\n * @param {number} n - The number to round\n * @param {number} precision - Number of significant digits\n */ function toPrecision(n, precision) {\n    n = +n;\n    precision = +precision;\n    let integerLength = (Math.floor(n) + \"\").length;\n    if (precision > integerLength) {\n        return +n.toFixed(precision - integerLength);\n    } else {\n        let p10 = 10 ** (integerLength - precision);\n        return Math.round(n / p10) * p10;\n    }\n}\n/**\n* Parse a CSS function, regardless of its name and arguments\n* @param String str String to parse\n* @return {{name, args, rawArgs}}\n*/ function parseFunction(str) {\n    if (!str) {\n        return;\n    }\n    str = str.trim();\n    const isFunctionRegex = /^([a-z]+)\\((.+?)\\)$/i;\n    const isNumberRegex = /^-?[\\d.]+$/;\n    let parts = str.match(isFunctionRegex);\n    if (parts) {\n        // It is a function, parse args\n        let args = [];\n        parts[2].replace(/\\/?\\s*([-\\w.]+(?:%|deg)?)/g, ($0, arg)=>{\n            if (/%$/.test(arg)) {\n                // Convert percentages to 0-1 numbers\n                arg = new Number(arg.slice(0, -1) / 100);\n                arg.type = \"<percentage>\";\n            } else if (/deg$/.test(arg)) {\n                // Drop deg from degrees and convert to number\n                // TODO handle other units too\n                arg = new Number(+arg.slice(0, -3));\n                arg.type = \"<angle>\";\n                arg.unit = \"deg\";\n            } else if (isNumberRegex.test(arg)) {\n                // Convert numerical args to numbers\n                arg = new Number(arg);\n                arg.type = \"<number>\";\n            }\n            if ($0.startsWith(\"/\")) {\n                // It's alpha\n                arg = arg instanceof Number ? arg : new Number(arg);\n                arg.alpha = true;\n            }\n            args.push(arg);\n        });\n        return {\n            name: parts[1].toLowerCase(),\n            rawName: parts[1],\n            rawArgs: parts[2],\n            // An argument could be (as of css-color-4):\n            // a number, percentage, degrees (hue), ident (in color())\n            args\n        };\n    }\n}\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nfunction interpolate(start, end, p) {\n    if (isNaN(start)) {\n        return end;\n    }\n    if (isNaN(end)) {\n        return start;\n    }\n    return start + (end - start) * p;\n}\nfunction interpolateInv(start, end, value) {\n    return (value - start) / (end - start);\n}\nfunction mapRange(from, to, value) {\n    return interpolate(to[0], to[1], interpolateInv(from[0], from[1], value));\n}\nfunction parseCoordGrammar(coordGrammars) {\n    return coordGrammars.map((coordGrammar)=>{\n        return coordGrammar.split(\"|\").map((type)=>{\n            type = type.trim();\n            let range = type.match(/^(<[a-z]+>)\\[(-?[.\\d]+),\\s*(-?[.\\d]+)\\]?$/);\n            if (range) {\n                let ret = new String(range[1]);\n                ret.range = [\n                    +range[2],\n                    +range[3]\n                ];\n                return ret;\n            }\n            return type;\n        });\n    });\n}\nvar util = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    interpolate: interpolate,\n    interpolateInv: interpolateInv,\n    isString: isString,\n    last: last,\n    mapRange: mapRange,\n    multiplyMatrices: multiplyMatrices,\n    parseCoordGrammar: parseCoordGrammar,\n    parseFunction: parseFunction,\n    toPrecision: toPrecision,\n    type: type\n});\n/**\n * A class for adding deep extensibility to any piece of JS code\n */ class Hooks {\n    add(name, callback, first) {\n        if (typeof arguments[0] != \"string\") {\n            // Multiple hooks\n            for(var name in arguments[0]){\n                this.add(name, arguments[0][name], arguments[1]);\n            }\n            return;\n        }\n        (Array.isArray(name) ? name : [\n            name\n        ]).forEach(function(name) {\n            this[name] = this[name] || [];\n            if (callback) {\n                this[name][first ? \"unshift\" : \"push\"](callback);\n            }\n        }, this);\n    }\n    run(name, env) {\n        this[name] = this[name] || [];\n        this[name].forEach(function(callback) {\n            callback.call(env && env.context ? env.context : env, env);\n        });\n    }\n}\n/**\n * The instance of {@link Hooks} used throughout Color.js\n */ const hooks = new Hooks();\n// Global defaults one may want to configure\nvar defaults = {\n    gamut_mapping: \"lch.c\",\n    precision: 5,\n    deltaE: \"76\"\n};\nconst WHITES = {\n    // for compatibility, the four-digit chromaticity-derived ones everyone else uses\n    D50: [\n        0.3457 / 0.3585,\n        1.00000,\n        (1.0 - 0.3457 - 0.3585) / 0.3585\n    ],\n    D65: [\n        0.3127 / 0.3290,\n        1.00000,\n        (1.0 - 0.3127 - 0.3290) / 0.3290\n    ]\n};\nfunction getWhite(name) {\n    if (Array.isArray(name)) {\n        return name;\n    }\n    return WHITES[name];\n}\n// Adapt XYZ from white point W1 to W2\nfunction adapt$1(W1, W2, XYZ, options = {}) {\n    W1 = getWhite(W1);\n    W2 = getWhite(W2);\n    if (!W1 || !W2) {\n        throw new TypeError(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);\n    }\n    if (W1 === W2) {\n        // Same whitepoints, no conversion needed\n        return XYZ;\n    }\n    let env = {\n        W1,\n        W2,\n        XYZ,\n        options\n    };\n    hooks.run(\"chromatic-adaptation-start\", env);\n    if (!env.M) {\n        if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {\n            env.M = [\n                [\n                    1.0479298208405488,\n                    0.022946793341019088,\n                    -0.05019222954313557\n                ],\n                [\n                    0.029627815688159344,\n                    0.990434484573249,\n                    -0.01707382502938514\n                ],\n                [\n                    -0.009243058152591178,\n                    0.015055144896577895,\n                    0.7518742899580008\n                ]\n            ];\n        } else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {\n            env.M = [\n                [\n                    0.9554734527042182,\n                    -0.023098536874261423,\n                    0.0632593086610217\n                ],\n                [\n                    -0.028369706963208136,\n                    1.0099954580058226,\n                    0.021041398966943008\n                ],\n                [\n                    0.012314001688319899,\n                    -0.020507696433477912,\n                    1.3303659366080753\n                ]\n            ];\n        }\n    }\n    hooks.run(\"chromatic-adaptation-end\", env);\n    if (env.M) {\n        return multiplyMatrices(env.M, env.XYZ);\n    } else {\n        throw new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\n    }\n}\nconst ε$4 = .000075;\n/**\n * Class to represent a color space\n */ class ColorSpace {\n    constructor(options){\n        this.id = options.id;\n        this.name = options.name;\n        this.base = options.base ? ColorSpace.get(options.base) : null;\n        this.aliases = options.aliases;\n        if (this.base) {\n            this.fromBase = options.fromBase;\n            this.toBase = options.toBase;\n        }\n        // Coordinate metadata\n        let coords = options.coords ?? this.base.coords;\n        for(let name in coords){\n            if (!(\"name\" in coords[name])) {\n                coords[name].name = name;\n            }\n        }\n        this.coords = coords;\n        // White point\n        let white = options.white ?? this.base.white ?? \"D65\";\n        this.white = getWhite(white);\n        // Sort out formats\n        this.formats = options.formats ?? {};\n        for(let name in this.formats){\n            let format = this.formats[name];\n            format.type ||= \"function\";\n            format.name ||= name;\n        }\n        if (options.cssId && !this.formats.functions?.color) {\n            this.formats.color = {\n                id: options.cssId\n            };\n            Object.defineProperty(this, \"cssId\", {\n                value: options.cssId\n            });\n        } else if (this.formats?.color && !this.formats?.color.id) {\n            this.formats.color.id = this.id;\n        }\n        // Other stuff\n        this.referred = options.referred;\n        // Compute ancestors and store them, since they will never change\n        Object.defineProperty(this, \"path\", {\n            value: getPath(this).reverse(),\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        hooks.run(\"colorspace-init-end\", this);\n    }\n    inGamut(coords, { epsilon = ε$4 } = {}) {\n        if (this.isPolar) {\n            // Do not check gamut through polar coordinates\n            coords = this.toBase(coords);\n            return this.base.inGamut(coords, {\n                epsilon\n            });\n        }\n        let coordMeta = Object.values(this.coords);\n        return coords.every((c, i)=>{\n            let meta = coordMeta[i];\n            if (meta.type !== \"angle\" && meta.range) {\n                if (Number.isNaN(c)) {\n                    // NaN is always in gamut\n                    return true;\n                }\n                let [min, max] = meta.range;\n                return (min === undefined || c >= min - epsilon) && (max === undefined || c <= max + epsilon);\n            }\n            return true;\n        });\n    }\n    get cssId() {\n        return this.formats.functions?.color?.id || this.id;\n    }\n    get isPolar() {\n        for(let id in this.coords){\n            if (this.coords[id].type === \"angle\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    getFormat(format) {\n        if (typeof format === \"object\") {\n            format = processFormat(format, this);\n            return format;\n        }\n        let ret;\n        if (format === \"default\") {\n            // Get first format\n            ret = Object.values(this.formats)[0];\n        } else {\n            ret = this.formats[format];\n        }\n        if (ret) {\n            ret = processFormat(ret, this);\n            return ret;\n        }\n        return null;\n    }\n    // We cannot rely on simple === because then ColorSpace objects cannot be proxied\n    equals(space) {\n        if (!space) {\n            return false;\n        }\n        return this === space || this.id === space.id;\n    }\n    to(space, coords) {\n        if (arguments.length === 1) {\n            [space, coords] = [\n                space.space,\n                space.coords\n            ];\n        }\n        space = ColorSpace.get(space);\n        if (this.equals(space)) {\n            // Same space, no change needed\n            return coords;\n        }\n        // Convert NaN to 0, which seems to be valid in every coordinate of every color space\n        coords = coords.map((c)=>Number.isNaN(c) ? 0 : c);\n        // Find connection space = lowest common ancestor in the base tree\n        let myPath = this.path;\n        let otherPath = space.path;\n        let connectionSpace, connectionSpaceIndex;\n        for(let i = 0; i < myPath.length; i++){\n            if (myPath[i].equals(otherPath[i])) {\n                connectionSpace = myPath[i];\n                connectionSpaceIndex = i;\n            } else {\n                break;\n            }\n        }\n        if (!connectionSpace) {\n            // This should never happen\n            throw new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);\n        }\n        // Go up from current space to connection space\n        for(let i = myPath.length - 1; i > connectionSpaceIndex; i--){\n            coords = myPath[i].toBase(coords);\n        }\n        // Go down from connection space to target space\n        for(let i = connectionSpaceIndex + 1; i < otherPath.length; i++){\n            coords = otherPath[i].fromBase(coords);\n        }\n        return coords;\n    }\n    from(space, coords) {\n        if (arguments.length === 1) {\n            [space, coords] = [\n                space.space,\n                space.coords\n            ];\n        }\n        space = ColorSpace.get(space);\n        return space.to(this, coords);\n    }\n    toString() {\n        return `${this.name} (${this.id})`;\n    }\n    getMinCoords() {\n        let ret = [];\n        for(let id in this.coords){\n            let meta = this.coords[id];\n            let range = meta.range || meta.refRange;\n            ret.push(range?.min ?? 0);\n        }\n        return ret;\n    }\n    static{\n        this.registry = {};\n    }\n    // Returns array of unique color spaces\n    static get all() {\n        return [\n            ...new Set(Object.values(ColorSpace.registry))\n        ];\n    }\n    static register(id, space) {\n        if (arguments.length === 1) {\n            space = arguments[0];\n            id = space.id;\n        }\n        space = this.get(space);\n        if (this.registry[id] && this.registry[id] !== space) {\n            throw new Error(`Duplicate color space registration: '${id}'`);\n        }\n        this.registry[id] = space;\n        // Register aliases when called without an explicit ID.\n        if (arguments.length === 1 && space.aliases) {\n            for (let alias of space.aliases){\n                this.register(alias, space);\n            }\n        }\n        return space;\n    }\n    /**\n\t * Lookup ColorSpace object by name\n\t * @param {ColorSpace | string} name\n\t */ static get(space, ...alternatives) {\n        if (!space || space instanceof ColorSpace) {\n            return space;\n        }\n        let argType = type(space);\n        if (argType === \"string\") {\n            // It's a color space id\n            let ret = ColorSpace.registry[space.toLowerCase()];\n            if (!ret) {\n                throw new TypeError(`No color space found with id = \"${space}\"`);\n            }\n            return ret;\n        }\n        if (alternatives.length) {\n            return ColorSpace.get(...alternatives);\n        }\n        throw new TypeError(`${space} is not a valid color space`);\n    }\n    /**\n\t * Get metadata about a coordinate of a color space\n\t *\n\t * @static\n\t * @param {Array | string} ref\n\t * @param {ColorSpace | string} [workingSpace]\n\t * @return {Object}\n\t */ static resolveCoord(ref, workingSpace) {\n        let coordType = type(ref);\n        let space, coord;\n        if (coordType === \"string\") {\n            if (ref.includes(\".\")) {\n                // Absolute coordinate\n                [space, coord] = ref.split(\".\");\n            } else {\n                // Relative coordinate\n                [space, coord] = [\n                    ,\n                    ref\n                ];\n            }\n        } else if (Array.isArray(ref)) {\n            [space, coord] = ref;\n        } else {\n            // Object\n            space = ref.space;\n            coord = ref.coordId;\n        }\n        space = ColorSpace.get(space);\n        if (!space) {\n            space = workingSpace;\n        }\n        if (!space) {\n            throw new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);\n        }\n        coordType = type(coord);\n        if (coordType === \"number\" || coordType === \"string\" && coord >= 0) {\n            // Resolve numerical coord\n            let meta = Object.entries(space.coords)[coord];\n            if (meta) {\n                return {\n                    space,\n                    id: meta[0],\n                    index: coord,\n                    ...meta[1]\n                };\n            }\n        }\n        space = ColorSpace.get(space);\n        let normalizedCoord = coord.toLowerCase();\n        let i = 0;\n        for(let id in space.coords){\n            let meta = space.coords[id];\n            if (id.toLowerCase() === normalizedCoord || meta.name?.toLowerCase() === normalizedCoord) {\n                return {\n                    space,\n                    id,\n                    index: i,\n                    ...meta\n                };\n            }\n            i++;\n        }\n        throw new TypeError(`No \"${coord}\" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(\", \")}`);\n    }\n    static{\n        this.DEFAULT_FORMAT = {\n            type: \"functions\",\n            name: \"color\"\n        };\n    }\n}\nfunction getPath(space) {\n    let ret = [\n        space\n    ];\n    for(let s = space; s = s.base;){\n        ret.push(s);\n    }\n    return ret;\n}\nfunction processFormat(format, { coords } = {}) {\n    if (format.coords && !format.coordGrammar) {\n        format.type ||= \"function\";\n        format.name ||= \"color\";\n        // Format has not been processed\n        format.coordGrammar = parseCoordGrammar(format.coords);\n        let coordFormats = Object.entries(coords).map(([id, coordMeta], i)=>{\n            // Preferred format for each coord is the first one\n            let outputType = format.coordGrammar[i][0];\n            let fromRange = coordMeta.range || coordMeta.refRange;\n            let toRange = outputType.range, suffix = \"\";\n            // Non-strict equals intentional since outputType could be a string object\n            if (outputType == \"<percentage>\") {\n                toRange = [\n                    0,\n                    100\n                ];\n                suffix = \"%\";\n            } else if (outputType == \"<angle>\") {\n                suffix = \"deg\";\n            }\n            return {\n                fromRange,\n                toRange,\n                suffix\n            };\n        });\n        format.serializeCoords = (coords, precision)=>{\n            return coords.map((c, i)=>{\n                let { fromRange, toRange, suffix } = coordFormats[i];\n                if (fromRange && toRange) {\n                    c = mapRange(fromRange, toRange, c);\n                }\n                c = toPrecision(c, precision);\n                if (suffix) {\n                    c += suffix;\n                }\n                return c;\n            });\n        };\n    }\n    return format;\n}\nvar XYZ_D65 = new ColorSpace({\n    id: \"xyz-d65\",\n    name: \"XYZ D65\",\n    coords: {\n        x: {\n            name: \"X\"\n        },\n        y: {\n            name: \"Y\"\n        },\n        z: {\n            name: \"Z\"\n        }\n    },\n    white: \"D65\",\n    formats: {\n        color: {\n            ids: [\n                \"xyz-d65\",\n                \"xyz\"\n            ]\n        }\n    },\n    aliases: [\n        \"xyz\"\n    ]\n});\n/**\n * Convenience class for RGB color spaces\n * @extends {ColorSpace}\n */ class RGBColorSpace extends ColorSpace {\n    /**\n\t * Creates a new RGB ColorSpace.\n\t * If coords are not specified, they will use the default RGB coords.\n\t * Instead of `fromBase()` and `toBase()` functions,\n\t * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.\n\t * @param {*} options - Same options as {@link ColorSpace} plus:\n\t * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ\n\t * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ\n\t */ constructor(options){\n        if (!options.coords) {\n            options.coords = {\n                r: {\n                    range: [\n                        0,\n                        1\n                    ],\n                    name: \"Red\"\n                },\n                g: {\n                    range: [\n                        0,\n                        1\n                    ],\n                    name: \"Green\"\n                },\n                b: {\n                    range: [\n                        0,\n                        1\n                    ],\n                    name: \"Blue\"\n                }\n            };\n        }\n        if (!options.base) {\n            options.base = XYZ_D65;\n        }\n        if (options.toXYZ_M && options.fromXYZ_M) {\n            options.toBase ??= (rgb)=>{\n                let xyz = multiplyMatrices(options.toXYZ_M, rgb);\n                if (this.white !== this.base.white) {\n                    // Perform chromatic adaptation\n                    xyz = adapt$1(this.white, this.base.white, xyz);\n                }\n                return xyz;\n            };\n            options.fromBase ??= (xyz)=>{\n                xyz = adapt$1(this.base.white, this.white, xyz);\n                return multiplyMatrices(options.fromXYZ_M, xyz);\n            };\n        }\n        options.referred ??= \"display\";\n        super(options);\n    }\n}\n/**\n * Convert a CSS Color string to a color object\n * @param {string} str\n * @param {object} [options]\n * @param {object} [options.meta] - Object for additional information about the parsing\n * @returns { Color }\n */ function parse(str, { meta } = {}) {\n    let env = {\n        \"str\": String(str)?.trim()\n    };\n    hooks.run(\"parse-start\", env);\n    if (env.color) {\n        return env.color;\n    }\n    env.parsed = parseFunction(env.str);\n    if (env.parsed) {\n        // Is a functional syntax\n        let name = env.parsed.name;\n        if (name === \"color\") {\n            // color() function\n            let id = env.parsed.args.shift();\n            let alpha = env.parsed.rawArgs.indexOf(\"/\") > 0 ? env.parsed.args.pop() : 1;\n            for (let space of ColorSpace.all){\n                let colorSpec = space.getFormat(\"color\");\n                if (colorSpec) {\n                    if (id === colorSpec.id || colorSpec.ids?.includes(id)) {\n                        // From https://drafts.csswg.org/css-color-4/#color-function\n                        // If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.\n                        // If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)\n                        const coords = Object.keys(space.coords).map((_, i)=>env.parsed.args[i] || 0);\n                        if (meta) {\n                            meta.formatId = \"color\";\n                        }\n                        return {\n                            spaceId: space.id,\n                            coords,\n                            alpha\n                        };\n                    }\n                }\n            }\n            // Not found\n            let didYouMean = \"\";\n            if (id in ColorSpace.registry) {\n                // Used color space id instead of color() id, these are often different\n                let cssId = ColorSpace.registry[id].formats?.functions?.color?.id;\n                if (cssId) {\n                    didYouMean = `Did you mean color(${cssId})?`;\n                }\n            }\n            throw new TypeError(`Cannot parse color(${id}). ` + (didYouMean || \"Missing a plugin?\"));\n        } else {\n            for (let space of ColorSpace.all){\n                // color space specific function\n                let format = space.getFormat(name);\n                if (format && format.type === \"function\") {\n                    let alpha = 1;\n                    if (format.lastAlpha || last(env.parsed.args).alpha) {\n                        alpha = env.parsed.args.pop();\n                    }\n                    let coords = env.parsed.args;\n                    let types;\n                    if (format.coordGrammar) {\n                        types = Object.entries(space.coords).map(([id, coordMeta], i)=>{\n                            let coordGrammar = format.coordGrammar[i];\n                            let providedType = coords[i]?.type;\n                            // Find grammar alternative that matches the provided type\n                            // Non-strict equals is intentional because we are comparing w/ string objects\n                            let type = coordGrammar.find((c)=>c == providedType);\n                            // Check that each coord conforms to its grammar\n                            if (!type) {\n                                // Type does not exist in the grammar, throw\n                                let coordName = coordMeta.name || id;\n                                throw new TypeError(`${providedType} not allowed for ${coordName} in ${name}()`);\n                            }\n                            let fromRange = type.range;\n                            if (providedType === \"<percentage>\") {\n                                fromRange ||= [\n                                    0,\n                                    1\n                                ];\n                            }\n                            let toRange = coordMeta.range || coordMeta.refRange;\n                            if (fromRange && toRange) {\n                                coords[i] = mapRange(fromRange, toRange, coords[i]);\n                            }\n                            return type;\n                        });\n                    }\n                    if (meta) {\n                        Object.assign(meta, {\n                            formatId: format.name,\n                            types\n                        });\n                    }\n                    return {\n                        spaceId: space.id,\n                        coords,\n                        alpha\n                    };\n                }\n            }\n        }\n    } else {\n        // Custom, colorspace-specific format\n        for (let space of ColorSpace.all){\n            for(let formatId in space.formats){\n                let format = space.formats[formatId];\n                if (format.type !== \"custom\") {\n                    continue;\n                }\n                if (format.test && !format.test(env.str)) {\n                    continue;\n                }\n                let color = format.parse(env.str);\n                if (color) {\n                    color.alpha ??= 1;\n                    if (meta) {\n                        meta.formatId = formatId;\n                    }\n                    return color;\n                }\n            }\n        }\n    }\n    // If we're here, we couldn't parse\n    throw new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);\n}\n/**\n * Resolves a color reference (object or string) to a plain color object\n * @param {Color | {space, coords, alpha} | string} color\n * @returns {{space, coords, alpha}}\n */ function getColor(color) {\n    if (!color) {\n        throw new TypeError(\"Empty color reference\");\n    }\n    if (isString(color)) {\n        color = parse(color);\n    }\n    // Object fixup\n    let space = color.space || color.spaceId;\n    if (!(space instanceof ColorSpace)) {\n        // Convert string id to color space object\n        color.space = ColorSpace.get(space);\n    }\n    if (color.alpha === undefined) {\n        color.alpha = 1;\n    }\n    return color;\n}\n/**\n * Get the coordinates of a color in another color space\n *\n * @param {string | ColorSpace} space\n * @returns {number[]}\n */ function getAll(color, space) {\n    space = ColorSpace.get(space);\n    return space.from(color);\n}\nfunction get(color, prop) {\n    let { space, index } = ColorSpace.resolveCoord(prop, color.space);\n    let coords = getAll(color, space);\n    return coords[index];\n}\nfunction setAll(color, space, coords) {\n    space = ColorSpace.get(space);\n    color.coords = space.to(color.space, coords);\n    return color;\n}\n// Set properties and return current instance\nfunction set(color, prop, value) {\n    color = getColor(color);\n    if (arguments.length === 2 && type(arguments[1]) === \"object\") {\n        // Argument is an object literal\n        let object = arguments[1];\n        for(let p in object){\n            set(color, p, object[p]);\n        }\n    } else {\n        if (typeof value === \"function\") {\n            value = value(get(color, prop));\n        }\n        let { space, index } = ColorSpace.resolveCoord(prop, color.space);\n        let coords = getAll(color, space);\n        coords[index] = value;\n        setAll(color, space, coords);\n    }\n    return color;\n}\nvar XYZ_D50 = new ColorSpace({\n    id: \"xyz-d50\",\n    name: \"XYZ D50\",\n    white: \"D50\",\n    base: XYZ_D65,\n    fromBase: (coords)=>adapt$1(XYZ_D65.white, \"D50\", coords),\n    toBase: (coords)=>adapt$1(\"D50\", XYZ_D65.white, coords),\n    formats: {\n        color: {}\n    }\n});\n// κ * ε  = 2^3 = 8\nconst ε$3 = 216 / 24389; // 6^3/29^3 == (24/116)^3\nconst ε3$1 = 24 / 116;\nconst κ$1 = 24389 / 27; // 29^3/3^3\nlet white$1 = WHITES.D50;\nvar lab = new ColorSpace({\n    id: \"lab\",\n    name: \"Lab\",\n    coords: {\n        l: {\n            refRange: [\n                0,\n                100\n            ],\n            name: \"L\"\n        },\n        a: {\n            refRange: [\n                -125,\n                125\n            ]\n        },\n        b: {\n            refRange: [\n                -125,\n                125\n            ]\n        }\n    },\n    // Assuming XYZ is relative to D50, convert to CIE Lab\n    // from CIE standard, which now defines these as a rational fraction\n    white: white$1,\n    base: XYZ_D50,\n    // Convert D50-adapted XYX to Lab\n    //  CIE 15.3:2004 section 8.2.1.1\n    fromBase (XYZ) {\n        // compute xyz, which is XYZ scaled relative to reference white\n        let xyz = XYZ.map((value, i)=>value / white$1[i]);\n        // now compute f\n        let f = xyz.map((value)=>value > ε$3 ? Math.cbrt(value) : (κ$1 * value + 16) / 116);\n        return [\n            116 * f[1] - 16,\n            500 * (f[0] - f[1]),\n            200 * (f[1] - f[2] // b\n            )\n        ];\n    },\n    // Convert Lab to D50-adapted XYZ\n    // Same result as CIE 15.3:2004 Appendix D although the derivation is different\n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    toBase (Lab) {\n        // compute f, starting with the luminance-related term\n        let f = [];\n        f[1] = (Lab[0] + 16) / 116;\n        f[0] = Lab[1] / 500 + f[1];\n        f[2] = f[1] - Lab[2] / 200;\n        // compute xyz\n        let xyz = [\n            f[0] > ε3$1 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / κ$1,\n            Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ$1,\n            f[2] > ε3$1 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / κ$1\n        ];\n        // Compute XYZ by scaling xyz by reference white\n        return xyz.map((value, i)=>value * white$1[i]);\n    },\n    formats: {\n        \"lab\": {\n            coords: [\n                \"<number> | <percentage>\",\n                \"<number> | <percentage>[-1,1]\",\n                \"<number> | <percentage>[-1,1]\"\n            ]\n        }\n    }\n});\nfunction constrain(angle) {\n    return (angle % 360 + 360) % 360;\n}\nfunction adjust(arc, angles) {\n    if (arc === \"raw\") {\n        return angles;\n    }\n    let [a1, a2] = angles.map(constrain);\n    let angleDiff = a2 - a1;\n    if (arc === \"increasing\") {\n        if (angleDiff < 0) {\n            a2 += 360;\n        }\n    } else if (arc === \"decreasing\") {\n        if (angleDiff > 0) {\n            a1 += 360;\n        }\n    } else if (arc === \"longer\") {\n        if (-180 < angleDiff && angleDiff < 180) {\n            if (angleDiff > 0) {\n                a1 += 360;\n            } else {\n                a2 += 360;\n            }\n        }\n    } else if (arc === \"shorter\") {\n        if (angleDiff > 180) {\n            a1 += 360;\n        } else if (angleDiff < -180) {\n            a2 += 360;\n        }\n    }\n    return [\n        a1,\n        a2\n    ];\n}\nvar lch = new ColorSpace({\n    id: \"lch\",\n    name: \"LCH\",\n    coords: {\n        l: {\n            refRange: [\n                0,\n                100\n            ],\n            name: \"Lightness\"\n        },\n        c: {\n            refRange: [\n                0,\n                150\n            ],\n            name: \"Chroma\"\n        },\n        h: {\n            refRange: [\n                0,\n                360\n            ],\n            type: \"angle\",\n            name: \"Hue\"\n        }\n    },\n    base: lab,\n    fromBase (Lab) {\n        // Convert to polar form\n        let [L, a, b] = Lab;\n        let hue;\n        const ε = 0.02;\n        if (Math.abs(a) < ε && Math.abs(b) < ε) {\n            hue = NaN;\n        } else {\n            hue = Math.atan2(b, a) * 180 / Math.PI;\n        }\n        return [\n            L,\n            Math.sqrt(a ** 2 + b ** 2),\n            constrain(hue) // Hue, in degrees [0 to 360)\n        ];\n    },\n    toBase (LCH) {\n        // Convert from polar form\n        let [Lightness, Chroma, Hue] = LCH;\n        // Clamp any negative Chroma\n        if (Chroma < 0) {\n            Chroma = 0;\n        } // Deal with NaN Hue\n        if (isNaN(Hue)) {\n            Hue = 0;\n        }\n        return [\n            Lightness,\n            Chroma * Math.cos(Hue * Math.PI / 180),\n            Chroma * Math.sin(Hue * Math.PI / 180) // b\n        ];\n    },\n    formats: {\n        \"lch\": {\n            coords: [\n                \"<number> | <percentage>\",\n                \"<number> | <percentage>\",\n                \"<number> | <angle>\"\n            ]\n        }\n    }\n});\n// deltaE2000 is a statistically significant improvement\n// and is recommended by the CIE and Idealliance\n// especially for color differences less than 10 deltaE76\n// but is wicked complicated\n// and many implementations have small errors!\n// DeltaE2000 is also discontinuous; in case this\n// matters to you, use deltaECMC instead.\nconst Gfactor = 25 ** 7;\nconst π$1 = Math.PI;\nconst r2d = 180 / π$1;\nconst d2r$1 = π$1 / 180;\nfunction deltaE2000(color, sample, { kL = 1, kC = 1, kH = 1 } = {}) {\n    // Given this color as the reference\n    // and the function parameter as the sample,\n    // calculate deltaE 2000.\n    // This implementation assumes the parametric\n    // weighting factors kL, kC and kH\n    // for the influence of viewing conditions\n    // are all 1, as sadly seems typical.\n    // kL should be increased for lightness texture or noise\n    // and kC increased for chroma noise\n    let [L1, a1, b1] = lab.from(color);\n    let C1 = lch.from(lab, [\n        L1,\n        a1,\n        b1\n    ])[1];\n    let [L2, a2, b2] = lab.from(sample);\n    let C2 = lch.from(lab, [\n        L2,\n        a2,\n        b2\n    ])[1];\n    // Check for negative Chroma,\n    // which might happen through\n    // direct user input of LCH values\n    if (C1 < 0) {\n        C1 = 0;\n    }\n    if (C2 < 0) {\n        C2 = 0;\n    }\n    let Cbar = (C1 + C2) / 2; // mean Chroma\n    // calculate a-axis asymmetry factor from mean Chroma\n    // this turns JND ellipses for near-neutral colors back into circles\n    let C7 = Cbar ** 7;\n    let G = 0.5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));\n    // scale a axes by asymmetry factor\n    // this by the way is why there is no Lab2000 colorspace\n    let adash1 = (1 + G) * a1;\n    let adash2 = (1 + G) * a2;\n    // calculate new Chroma from scaled a and original b axes\n    let Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);\n    let Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);\n    // calculate new hues, with zero hue for true neutrals\n    // and in degrees, not radians\n    let h1 = adash1 === 0 && b1 === 0 ? 0 : Math.atan2(b1, adash1);\n    let h2 = adash2 === 0 && b2 === 0 ? 0 : Math.atan2(b2, adash2);\n    if (h1 < 0) {\n        h1 += 2 * π$1;\n    }\n    if (h2 < 0) {\n        h2 += 2 * π$1;\n    }\n    h1 *= r2d;\n    h2 *= r2d;\n    // Lightness and Chroma differences; sign matters\n    let ΔL = L2 - L1;\n    let ΔC = Cdash2 - Cdash1;\n    // Hue difference, getting the sign correct\n    let hdiff = h2 - h1;\n    let hsum = h1 + h2;\n    let habs = Math.abs(hdiff);\n    let Δh;\n    if (Cdash1 * Cdash2 === 0) {\n        Δh = 0;\n    } else if (habs <= 180) {\n        Δh = hdiff;\n    } else if (hdiff > 180) {\n        Δh = hdiff - 360;\n    } else if (hdiff < -180) {\n        Δh = hdiff + 360;\n    } else {\n        console.log(\"the unthinkable has happened\");\n    }\n    // weighted Hue difference, more for larger Chroma\n    let ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r$1 / 2);\n    // calculate mean Lightness and Chroma\n    let Ldash = (L1 + L2) / 2;\n    let Cdash = (Cdash1 + Cdash2) / 2;\n    let Cdash7 = Math.pow(Cdash, 7);\n    // Compensate for non-linearity in the blue region of Lab.\n    // Four possibilities for hue weighting factor,\n    // depending on the angles, to get the correct sign\n    let hdash;\n    if (Cdash1 * Cdash2 === 0) {\n        hdash = hsum; // which should be zero\n    } else if (habs <= 180) {\n        hdash = hsum / 2;\n    } else if (hsum < 360) {\n        hdash = (hsum + 360) / 2;\n    } else {\n        hdash = (hsum - 360) / 2;\n    }\n    // positional corrections to the lack of uniformity of CIELAB\n    // These are all trying to make JND ellipsoids more like spheres\n    // SL Lightness crispening factor\n    // a background with L=50 is assumed\n    let lsq = (Ldash - 50) ** 2;\n    let SL = 1 + 0.015 * lsq / Math.sqrt(20 + lsq);\n    // SC Chroma factor, similar to those in CMC and deltaE 94 formulae\n    let SC = 1 + 0.045 * Cdash;\n    // Cross term T for blue non-linearity\n    let T = 1;\n    T -= 0.17 * Math.cos((hdash - 30) * d2r$1);\n    T += 0.24 * Math.cos(2 * hdash * d2r$1);\n    T += 0.32 * Math.cos((3 * hdash + 6) * d2r$1);\n    T -= 0.20 * Math.cos((4 * hdash - 63) * d2r$1);\n    // SH Hue factor depends on Chroma,\n    // as well as adjusted hue angle like deltaE94.\n    let SH = 1 + 0.015 * Cdash * T;\n    // RT Hue rotation term compensates for rotation of JND ellipses\n    // and Munsell constant hue lines\n    // in the medium-high Chroma blue region\n    // (Hue 225 to 315)\n    let Δθ = 30 * Math.exp(-1 * ((hdash - 275) / 25) ** 2);\n    let RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));\n    let RT = -1 * Math.sin(2 * Δθ * d2r$1) * RC;\n    // Finally calculate the deltaE, term by term as root sume of squares\n    let dE = (ΔL / (kL * SL)) ** 2;\n    dE += (ΔC / (kC * SC)) ** 2;\n    dE += (ΔH / (kH * SH)) ** 2;\n    dE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));\n    return Math.sqrt(dE);\n// Yay!!!\n}\nconst ε$2 = .000075;\n/**\n * Check if a color is in gamut of either its own or another color space\n * @return {Boolean} Is the color in gamut?\n */ function inGamut(color, space = color.space, { epsilon = ε$2 } = {}) {\n    color = getColor(color);\n    space = ColorSpace.get(space);\n    let coords = color.coords;\n    if (space !== color.space) {\n        coords = space.from(color);\n    }\n    return space.inGamut(coords, {\n        epsilon\n    });\n}\nfunction clone(color) {\n    return {\n        space: color.space,\n        coords: color.coords.slice(),\n        alpha: color.alpha\n    };\n}\n/**\n * Force coordinates to be in gamut of a certain color space.\n * Mutates the color it is passed.\n * @param {Object} options\n * @param {string} options.method - How to force into gamut.\n *        If \"clip\", coordinates are just clipped to their reference range.\n *        If in the form [colorSpaceId].[coordName], that coordinate is reduced\n *        until the color is in gamut. Please note that this may produce nonsensical\n *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.\n * @param {ColorSpace|string} options.space - The space whose gamut we want to map to\n */ function toGamut(color, { method = defaults.gamut_mapping, space = color.space } = {}) {\n    if (isString(arguments[1])) {\n        space = arguments[1];\n    }\n    space = ColorSpace.get(space);\n    if (inGamut(color, space, {\n        epsilon: 0\n    })) {\n        return getColor(color);\n    }\n    // 3 spaces:\n    // color.space: current color space\n    // space: space whose gamut we are mapping to\n    // mapSpace: space with the coord we're reducing\n    let spaceColor = to(color, space);\n    if (method !== \"clip\" && !inGamut(color, space)) {\n        let clipped = toGamut(clone(spaceColor), {\n            method: \"clip\",\n            space\n        });\n        if (deltaE2000(color, clipped) > 2) {\n            // Reduce a coordinate of a certain color space until the color is in gamut\n            let coordMeta = ColorSpace.resolveCoord(method);\n            let mapSpace = coordMeta.space;\n            let coordId = coordMeta.id;\n            let mappedColor = to(spaceColor, mapSpace);\n            let bounds = coordMeta.range || coordMeta.refRange;\n            let min = bounds[0];\n            let ε = .01; // for deltaE\n            let low = min;\n            let high = get(mappedColor, coordId);\n            while(high - low > ε){\n                let clipped = clone(mappedColor);\n                clipped = toGamut(clipped, {\n                    space,\n                    method: \"clip\"\n                });\n                let deltaE = deltaE2000(mappedColor, clipped);\n                if (deltaE - 2 < ε) {\n                    low = get(mappedColor, coordId);\n                } else {\n                    high = get(mappedColor, coordId);\n                }\n                set(mappedColor, coordId, (low + high) / 2);\n            }\n            spaceColor = to(mappedColor, space);\n        } else {\n            spaceColor = clipped;\n        }\n    }\n    if (method === \"clip\" // Dumb coord clipping\n     || !inGamut(spaceColor, space, {\n        epsilon: 0\n    })) {\n        let bounds = Object.values(space.coords).map((c)=>c.range || []);\n        spaceColor.coords = spaceColor.coords.map((c, i)=>{\n            let [min, max] = bounds[i];\n            if (min !== undefined) {\n                c = Math.max(min, c);\n            }\n            if (max !== undefined) {\n                c = Math.min(c, max);\n            }\n            return c;\n        });\n    }\n    if (space !== color.space) {\n        spaceColor = to(spaceColor, color.space);\n    }\n    color.coords = spaceColor.coords;\n    return color;\n}\ntoGamut.returns = \"color\";\n/**\n * Convert to color space and return a new color\n * @param {Object|string} space - Color space object or id\n * @param {Object} options\n * @param {boolean} options.inGamut - Whether to force resulting color in gamut\n * @returns {Color}\n */ function to(color, space, { inGamut } = {}) {\n    color = getColor(color);\n    space = ColorSpace.get(space);\n    let coords = space.from(color);\n    let ret = {\n        space,\n        coords,\n        alpha: color.alpha\n    };\n    if (inGamut) {\n        ret = toGamut(ret);\n    }\n    return ret;\n}\nto.returns = \"color\";\n/**\n * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space\n * @param {Object} options\n * @param {number} options.precision - Significant digits\n * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\n */ function serialize(color, { precision = defaults.precision, format = \"default\", inGamut: inGamut$1 = true, ...customOptions } = {}) {\n    let ret;\n    color = getColor(color);\n    let formatId = format;\n    format = color.space.getFormat(format) ?? color.space.getFormat(\"default\") ?? ColorSpace.DEFAULT_FORMAT;\n    inGamut$1 ||= format.toGamut;\n    let coords = color.coords;\n    // Convert NaN to zeros to have a chance at a valid CSS color\n    // Also convert -0 to 0\n    // This also clones it so we can manipulate it\n    coords = coords.map((c)=>c ? c : 0);\n    if (inGamut$1 && !inGamut(color)) {\n        coords = toGamut(clone(color), inGamut$1 === true ? undefined : inGamut$1).coords;\n    }\n    if (format.type === \"custom\") {\n        customOptions.precision = precision;\n        if (format.serialize) {\n            ret = format.serialize(coords, color.alpha, customOptions);\n        } else {\n            throw new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);\n        }\n    } else {\n        // Functional syntax\n        let name = format.name || \"color\";\n        if (format.serializeCoords) {\n            coords = format.serializeCoords(coords, precision);\n        } else {\n            if (precision !== null) {\n                coords = coords.map((c)=>toPrecision(c, precision));\n            }\n        }\n        let args = [\n            ...coords\n        ];\n        if (name === \"color\") {\n            // If output is a color() function, add colorspace id as first argument\n            let cssId = format.id || format.ids?.[0] || color.space.id;\n            args.unshift(cssId);\n        }\n        let alpha = color.alpha;\n        if (precision !== null) {\n            alpha = toPrecision(alpha, precision);\n        }\n        let strAlpha = color.alpha < 1 && !format.noAlpha ? `${format.commas ? \",\" : \" /\"} ${alpha}` : \"\";\n        ret = `${name}(${args.join(format.commas ? \", \" : \" \")}${strAlpha})`;\n    }\n    return ret;\n}\n// convert an array of linear-light rec2020 values to CIE XYZ\n// using  D65 (no chromatic adaptation)\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n// 0 is actually calculated as  4.994106574466076e-17\nconst toXYZ_M$5 = [\n    [\n        0.6369580483012914,\n        0.14461690358620832,\n        0.1688809751641721\n    ],\n    [\n        0.2627002120112671,\n        0.6779980715188708,\n        0.05930171646986196\n    ],\n    [\n        0.000000000000000,\n        0.028072693049087428,\n        1.060985057710791\n    ]\n];\n// from ITU-R BT.2124-0 Annex 2 p.3\nconst fromXYZ_M$5 = [\n    [\n        1.716651187971268,\n        -0.355670783776392,\n        -0.253366281373660\n    ],\n    [\n        -0.666684351832489,\n        1.616481236634939,\n        0.0157685458139111\n    ],\n    [\n        0.017639857445311,\n        -0.042770613257809,\n        0.942103121235474\n    ]\n];\nvar REC2020Linear = new RGBColorSpace({\n    id: \"rec2020-linear\",\n    name: \"Linear REC.2020\",\n    white: \"D65\",\n    toXYZ_M: toXYZ_M$5,\n    fromXYZ_M: fromXYZ_M$5,\n    formats: {\n        color: {}\n    }\n});\n// import sRGB from \"./srgb.js\";\nconst α = 1.09929682680944;\nconst β = 0.018053968510807;\nvar REC2020 = new RGBColorSpace({\n    id: \"rec2020\",\n    name: \"REC.2020\",\n    base: REC2020Linear,\n    // Non-linear transfer function from Rec. ITU-R BT.2020-2 table 4\n    toBase (RGB) {\n        return RGB.map(function(val) {\n            if (val < β * 4.5) {\n                return val / 4.5;\n            }\n            return Math.pow((val + α - 1) / α, 1 / 0.45);\n        });\n    },\n    fromBase (RGB) {\n        return RGB.map(function(val) {\n            if (val >= β) {\n                return α * Math.pow(val, 0.45) - (α - 1);\n            }\n            return 4.5 * val;\n        });\n    },\n    formats: {\n        color: {}\n    }\n});\nconst toXYZ_M$4 = [\n    [\n        0.4865709486482162,\n        0.26566769316909306,\n        0.1982172852343625\n    ],\n    [\n        0.2289745640697488,\n        0.6917385218365064,\n        0.079286914093745\n    ],\n    [\n        0.0000000000000000,\n        0.04511338185890264,\n        1.043944368900976\n    ]\n];\nconst fromXYZ_M$4 = [\n    [\n        2.493496911941425,\n        -0.9313836179191239,\n        -0.40271078445071684\n    ],\n    [\n        -0.8294889695615747,\n        1.7626640603183463,\n        0.023624685841943577\n    ],\n    [\n        0.03584583024378447,\n        -0.07617238926804182,\n        0.9568845240076872\n    ]\n];\nvar P3Linear = new RGBColorSpace({\n    id: \"p3-linear\",\n    name: \"Linear P3\",\n    white: \"D65\",\n    toXYZ_M: toXYZ_M$4,\n    fromXYZ_M: fromXYZ_M$4\n});\n// This is the linear-light version of sRGB\n// as used for example in SVG filters\n// or in Canvas\n// This matrix was calculated directly from the RGB and white chromaticities\n// when rounded to 8 decimal places, it agrees completely with the official matrix\n// see https://github.com/w3c/csswg-drafts/issues/5922\nconst toXYZ_M$3 = [\n    [\n        0.41239079926595934,\n        0.357584339383878,\n        0.1804807884018343\n    ],\n    [\n        0.21263900587151027,\n        0.715168678767756,\n        0.07219231536073371\n    ],\n    [\n        0.01933081871559182,\n        0.11919477979462598,\n        0.9505321522496607\n    ]\n];\n// This matrix is the inverse of the above;\n// again it agrees with the official definition when rounded to 8 decimal places\nconst fromXYZ_M$3 = [\n    [\n        3.2409699419045226,\n        -1.537383177570094,\n        -0.4986107602930034\n    ],\n    [\n        -0.9692436362808796,\n        1.8759675015077202,\n        0.04155505740717559\n    ],\n    [\n        0.05563007969699366,\n        -0.20397695888897652,\n        1.0569715142428786\n    ]\n];\nvar sRGBLinear = new RGBColorSpace({\n    id: \"srgb-linear\",\n    name: \"Linear sRGB\",\n    white: \"D65\",\n    toXYZ_M: toXYZ_M$3,\n    fromXYZ_M: fromXYZ_M$3,\n    formats: {\n        color: {}\n    }\n});\n/* List of CSS color keywords\n * Note that this does not include currentColor, transparent,\n * or system colors\n */ // To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors\n// and run in the console:\n// copy($$(\"tr\", $(\".named-color-table tbody\")).map(tr => `\"${tr.cells[2].textContent.trim()}\": [${tr.cells[4].textContent.trim().split(/\\s+/).map(c => c === \"0\"? \"0\" : c === \"255\"? \"1\" : c + \" / 255\").join(\", \")}]`).join(\",\\n\"))\nvar KEYWORDS = {\n    \"aliceblue\": [\n        240 / 255,\n        248 / 255,\n        1\n    ],\n    \"antiquewhite\": [\n        250 / 255,\n        235 / 255,\n        215 / 255\n    ],\n    \"aqua\": [\n        0,\n        1,\n        1\n    ],\n    \"aquamarine\": [\n        127 / 255,\n        1,\n        212 / 255\n    ],\n    \"azure\": [\n        240 / 255,\n        1,\n        1\n    ],\n    \"beige\": [\n        245 / 255,\n        245 / 255,\n        220 / 255\n    ],\n    \"bisque\": [\n        1,\n        228 / 255,\n        196 / 255\n    ],\n    \"black\": [\n        0,\n        0,\n        0\n    ],\n    \"blanchedalmond\": [\n        1,\n        235 / 255,\n        205 / 255\n    ],\n    \"blue\": [\n        0,\n        0,\n        1\n    ],\n    \"blueviolet\": [\n        138 / 255,\n        43 / 255,\n        226 / 255\n    ],\n    \"brown\": [\n        165 / 255,\n        42 / 255,\n        42 / 255\n    ],\n    \"burlywood\": [\n        222 / 255,\n        184 / 255,\n        135 / 255\n    ],\n    \"cadetblue\": [\n        95 / 255,\n        158 / 255,\n        160 / 255\n    ],\n    \"chartreuse\": [\n        127 / 255,\n        1,\n        0\n    ],\n    \"chocolate\": [\n        210 / 255,\n        105 / 255,\n        30 / 255\n    ],\n    \"coral\": [\n        1,\n        127 / 255,\n        80 / 255\n    ],\n    \"cornflowerblue\": [\n        100 / 255,\n        149 / 255,\n        237 / 255\n    ],\n    \"cornsilk\": [\n        1,\n        248 / 255,\n        220 / 255\n    ],\n    \"crimson\": [\n        220 / 255,\n        20 / 255,\n        60 / 255\n    ],\n    \"cyan\": [\n        0,\n        1,\n        1\n    ],\n    \"darkblue\": [\n        0,\n        0,\n        139 / 255\n    ],\n    \"darkcyan\": [\n        0,\n        139 / 255,\n        139 / 255\n    ],\n    \"darkgoldenrod\": [\n        184 / 255,\n        134 / 255,\n        11 / 255\n    ],\n    \"darkgray\": [\n        169 / 255,\n        169 / 255,\n        169 / 255\n    ],\n    \"darkgreen\": [\n        0,\n        100 / 255,\n        0\n    ],\n    \"darkgrey\": [\n        169 / 255,\n        169 / 255,\n        169 / 255\n    ],\n    \"darkkhaki\": [\n        189 / 255,\n        183 / 255,\n        107 / 255\n    ],\n    \"darkmagenta\": [\n        139 / 255,\n        0,\n        139 / 255\n    ],\n    \"darkolivegreen\": [\n        85 / 255,\n        107 / 255,\n        47 / 255\n    ],\n    \"darkorange\": [\n        1,\n        140 / 255,\n        0\n    ],\n    \"darkorchid\": [\n        153 / 255,\n        50 / 255,\n        204 / 255\n    ],\n    \"darkred\": [\n        139 / 255,\n        0,\n        0\n    ],\n    \"darksalmon\": [\n        233 / 255,\n        150 / 255,\n        122 / 255\n    ],\n    \"darkseagreen\": [\n        143 / 255,\n        188 / 255,\n        143 / 255\n    ],\n    \"darkslateblue\": [\n        72 / 255,\n        61 / 255,\n        139 / 255\n    ],\n    \"darkslategray\": [\n        47 / 255,\n        79 / 255,\n        79 / 255\n    ],\n    \"darkslategrey\": [\n        47 / 255,\n        79 / 255,\n        79 / 255\n    ],\n    \"darkturquoise\": [\n        0,\n        206 / 255,\n        209 / 255\n    ],\n    \"darkviolet\": [\n        148 / 255,\n        0,\n        211 / 255\n    ],\n    \"deeppink\": [\n        1,\n        20 / 255,\n        147 / 255\n    ],\n    \"deepskyblue\": [\n        0,\n        191 / 255,\n        1\n    ],\n    \"dimgray\": [\n        105 / 255,\n        105 / 255,\n        105 / 255\n    ],\n    \"dimgrey\": [\n        105 / 255,\n        105 / 255,\n        105 / 255\n    ],\n    \"dodgerblue\": [\n        30 / 255,\n        144 / 255,\n        1\n    ],\n    \"firebrick\": [\n        178 / 255,\n        34 / 255,\n        34 / 255\n    ],\n    \"floralwhite\": [\n        1,\n        250 / 255,\n        240 / 255\n    ],\n    \"forestgreen\": [\n        34 / 255,\n        139 / 255,\n        34 / 255\n    ],\n    \"fuchsia\": [\n        1,\n        0,\n        1\n    ],\n    \"gainsboro\": [\n        220 / 255,\n        220 / 255,\n        220 / 255\n    ],\n    \"ghostwhite\": [\n        248 / 255,\n        248 / 255,\n        1\n    ],\n    \"gold\": [\n        1,\n        215 / 255,\n        0\n    ],\n    \"goldenrod\": [\n        218 / 255,\n        165 / 255,\n        32 / 255\n    ],\n    \"gray\": [\n        128 / 255,\n        128 / 255,\n        128 / 255\n    ],\n    \"green\": [\n        0,\n        128 / 255,\n        0\n    ],\n    \"greenyellow\": [\n        173 / 255,\n        1,\n        47 / 255\n    ],\n    \"grey\": [\n        128 / 255,\n        128 / 255,\n        128 / 255\n    ],\n    \"honeydew\": [\n        240 / 255,\n        1,\n        240 / 255\n    ],\n    \"hotpink\": [\n        1,\n        105 / 255,\n        180 / 255\n    ],\n    \"indianred\": [\n        205 / 255,\n        92 / 255,\n        92 / 255\n    ],\n    \"indigo\": [\n        75 / 255,\n        0,\n        130 / 255\n    ],\n    \"ivory\": [\n        1,\n        1,\n        240 / 255\n    ],\n    \"khaki\": [\n        240 / 255,\n        230 / 255,\n        140 / 255\n    ],\n    \"lavender\": [\n        230 / 255,\n        230 / 255,\n        250 / 255\n    ],\n    \"lavenderblush\": [\n        1,\n        240 / 255,\n        245 / 255\n    ],\n    \"lawngreen\": [\n        124 / 255,\n        252 / 255,\n        0\n    ],\n    \"lemonchiffon\": [\n        1,\n        250 / 255,\n        205 / 255\n    ],\n    \"lightblue\": [\n        173 / 255,\n        216 / 255,\n        230 / 255\n    ],\n    \"lightcoral\": [\n        240 / 255,\n        128 / 255,\n        128 / 255\n    ],\n    \"lightcyan\": [\n        224 / 255,\n        1,\n        1\n    ],\n    \"lightgoldenrodyellow\": [\n        250 / 255,\n        250 / 255,\n        210 / 255\n    ],\n    \"lightgray\": [\n        211 / 255,\n        211 / 255,\n        211 / 255\n    ],\n    \"lightgreen\": [\n        144 / 255,\n        238 / 255,\n        144 / 255\n    ],\n    \"lightgrey\": [\n        211 / 255,\n        211 / 255,\n        211 / 255\n    ],\n    \"lightpink\": [\n        1,\n        182 / 255,\n        193 / 255\n    ],\n    \"lightsalmon\": [\n        1,\n        160 / 255,\n        122 / 255\n    ],\n    \"lightseagreen\": [\n        32 / 255,\n        178 / 255,\n        170 / 255\n    ],\n    \"lightskyblue\": [\n        135 / 255,\n        206 / 255,\n        250 / 255\n    ],\n    \"lightslategray\": [\n        119 / 255,\n        136 / 255,\n        153 / 255\n    ],\n    \"lightslategrey\": [\n        119 / 255,\n        136 / 255,\n        153 / 255\n    ],\n    \"lightsteelblue\": [\n        176 / 255,\n        196 / 255,\n        222 / 255\n    ],\n    \"lightyellow\": [\n        1,\n        1,\n        224 / 255\n    ],\n    \"lime\": [\n        0,\n        1,\n        0\n    ],\n    \"limegreen\": [\n        50 / 255,\n        205 / 255,\n        50 / 255\n    ],\n    \"linen\": [\n        250 / 255,\n        240 / 255,\n        230 / 255\n    ],\n    \"magenta\": [\n        1,\n        0,\n        1\n    ],\n    \"maroon\": [\n        128 / 255,\n        0,\n        0\n    ],\n    \"mediumaquamarine\": [\n        102 / 255,\n        205 / 255,\n        170 / 255\n    ],\n    \"mediumblue\": [\n        0,\n        0,\n        205 / 255\n    ],\n    \"mediumorchid\": [\n        186 / 255,\n        85 / 255,\n        211 / 255\n    ],\n    \"mediumpurple\": [\n        147 / 255,\n        112 / 255,\n        219 / 255\n    ],\n    \"mediumseagreen\": [\n        60 / 255,\n        179 / 255,\n        113 / 255\n    ],\n    \"mediumslateblue\": [\n        123 / 255,\n        104 / 255,\n        238 / 255\n    ],\n    \"mediumspringgreen\": [\n        0,\n        250 / 255,\n        154 / 255\n    ],\n    \"mediumturquoise\": [\n        72 / 255,\n        209 / 255,\n        204 / 255\n    ],\n    \"mediumvioletred\": [\n        199 / 255,\n        21 / 255,\n        133 / 255\n    ],\n    \"midnightblue\": [\n        25 / 255,\n        25 / 255,\n        112 / 255\n    ],\n    \"mintcream\": [\n        245 / 255,\n        1,\n        250 / 255\n    ],\n    \"mistyrose\": [\n        1,\n        228 / 255,\n        225 / 255\n    ],\n    \"moccasin\": [\n        1,\n        228 / 255,\n        181 / 255\n    ],\n    \"navajowhite\": [\n        1,\n        222 / 255,\n        173 / 255\n    ],\n    \"navy\": [\n        0,\n        0,\n        128 / 255\n    ],\n    \"oldlace\": [\n        253 / 255,\n        245 / 255,\n        230 / 255\n    ],\n    \"olive\": [\n        128 / 255,\n        128 / 255,\n        0\n    ],\n    \"olivedrab\": [\n        107 / 255,\n        142 / 255,\n        35 / 255\n    ],\n    \"orange\": [\n        1,\n        165 / 255,\n        0\n    ],\n    \"orangered\": [\n        1,\n        69 / 255,\n        0\n    ],\n    \"orchid\": [\n        218 / 255,\n        112 / 255,\n        214 / 255\n    ],\n    \"palegoldenrod\": [\n        238 / 255,\n        232 / 255,\n        170 / 255\n    ],\n    \"palegreen\": [\n        152 / 255,\n        251 / 255,\n        152 / 255\n    ],\n    \"paleturquoise\": [\n        175 / 255,\n        238 / 255,\n        238 / 255\n    ],\n    \"palevioletred\": [\n        219 / 255,\n        112 / 255,\n        147 / 255\n    ],\n    \"papayawhip\": [\n        1,\n        239 / 255,\n        213 / 255\n    ],\n    \"peachpuff\": [\n        1,\n        218 / 255,\n        185 / 255\n    ],\n    \"peru\": [\n        205 / 255,\n        133 / 255,\n        63 / 255\n    ],\n    \"pink\": [\n        1,\n        192 / 255,\n        203 / 255\n    ],\n    \"plum\": [\n        221 / 255,\n        160 / 255,\n        221 / 255\n    ],\n    \"powderblue\": [\n        176 / 255,\n        224 / 255,\n        230 / 255\n    ],\n    \"purple\": [\n        128 / 255,\n        0,\n        128 / 255\n    ],\n    \"rebeccapurple\": [\n        102 / 255,\n        51 / 255,\n        153 / 255\n    ],\n    \"red\": [\n        1,\n        0,\n        0\n    ],\n    \"rosybrown\": [\n        188 / 255,\n        143 / 255,\n        143 / 255\n    ],\n    \"royalblue\": [\n        65 / 255,\n        105 / 255,\n        225 / 255\n    ],\n    \"saddlebrown\": [\n        139 / 255,\n        69 / 255,\n        19 / 255\n    ],\n    \"salmon\": [\n        250 / 255,\n        128 / 255,\n        114 / 255\n    ],\n    \"sandybrown\": [\n        244 / 255,\n        164 / 255,\n        96 / 255\n    ],\n    \"seagreen\": [\n        46 / 255,\n        139 / 255,\n        87 / 255\n    ],\n    \"seashell\": [\n        1,\n        245 / 255,\n        238 / 255\n    ],\n    \"sienna\": [\n        160 / 255,\n        82 / 255,\n        45 / 255\n    ],\n    \"silver\": [\n        192 / 255,\n        192 / 255,\n        192 / 255\n    ],\n    \"skyblue\": [\n        135 / 255,\n        206 / 255,\n        235 / 255\n    ],\n    \"slateblue\": [\n        106 / 255,\n        90 / 255,\n        205 / 255\n    ],\n    \"slategray\": [\n        112 / 255,\n        128 / 255,\n        144 / 255\n    ],\n    \"slategrey\": [\n        112 / 255,\n        128 / 255,\n        144 / 255\n    ],\n    \"snow\": [\n        1,\n        250 / 255,\n        250 / 255\n    ],\n    \"springgreen\": [\n        0,\n        1,\n        127 / 255\n    ],\n    \"steelblue\": [\n        70 / 255,\n        130 / 255,\n        180 / 255\n    ],\n    \"tan\": [\n        210 / 255,\n        180 / 255,\n        140 / 255\n    ],\n    \"teal\": [\n        0,\n        128 / 255,\n        128 / 255\n    ],\n    \"thistle\": [\n        216 / 255,\n        191 / 255,\n        216 / 255\n    ],\n    \"tomato\": [\n        1,\n        99 / 255,\n        71 / 255\n    ],\n    \"turquoise\": [\n        64 / 255,\n        224 / 255,\n        208 / 255\n    ],\n    \"violet\": [\n        238 / 255,\n        130 / 255,\n        238 / 255\n    ],\n    \"wheat\": [\n        245 / 255,\n        222 / 255,\n        179 / 255\n    ],\n    \"white\": [\n        1,\n        1,\n        1\n    ],\n    \"whitesmoke\": [\n        245 / 255,\n        245 / 255,\n        245 / 255\n    ],\n    \"yellow\": [\n        1,\n        1,\n        0\n    ],\n    \"yellowgreen\": [\n        154 / 255,\n        205 / 255,\n        50 / 255\n    ]\n};\nlet coordGrammar = Array(3).fill(\"<percentage> | <number>[0, 255]\");\nlet coordGrammarNumber = Array(3).fill(\"<number>[0, 255]\");\nvar sRGB = new RGBColorSpace({\n    id: \"srgb\",\n    name: \"sRGB\",\n    base: sRGBLinear,\n    fromBase: (rgb)=>{\n        // convert an array of linear-light sRGB values in the range 0.0-1.0\n        // to gamma corrected form\n        // https://en.wikipedia.org/wiki/SRGB\n        return rgb.map((val)=>{\n            let sign = val < 0 ? -1 : 1;\n            let abs = val * sign;\n            if (abs > 0.0031308) {\n                return sign * (1.055 * abs ** (1 / 2.4) - 0.055);\n            }\n            return 12.92 * val;\n        });\n    },\n    toBase: (rgb)=>{\n        // convert an array of sRGB values in the range 0.0 - 1.0\n        // to linear light (un-companded) form.\n        // https://en.wikipedia.org/wiki/SRGB\n        return rgb.map((val)=>{\n            let sign = val < 0 ? -1 : 1;\n            let abs = val * sign;\n            if (abs < 0.04045) {\n                return val / 12.92;\n            }\n            return sign * ((abs + 0.055) / 1.055) ** 2.4;\n        });\n    },\n    formats: {\n        \"rgb\": {\n            coords: coordGrammar\n        },\n        \"rgb_number\": {\n            name: \"rgb\",\n            commas: true,\n            coords: coordGrammarNumber,\n            noAlpha: true\n        },\n        \"color\": {},\n        \"rgba\": {\n            coords: coordGrammar,\n            commas: true,\n            lastAlpha: true\n        },\n        \"rgba_number\": {\n            name: \"rgba\",\n            commas: true,\n            coords: coordGrammarNumber\n        },\n        \"hex\": {\n            type: \"custom\",\n            toGamut: true,\n            test: (str)=>/^#([a-f0-9]{3,4}){1,2}$/i.test(str),\n            parse (str) {\n                if (str.length <= 5) {\n                    // #rgb or #rgba, duplicate digits\n                    str = str.replace(/[a-f0-9]/gi, \"$&$&\");\n                }\n                let rgba = [];\n                str.replace(/[a-f0-9]{2}/gi, (component)=>{\n                    rgba.push(parseInt(component, 16) / 255);\n                });\n                return {\n                    spaceId: \"srgb\",\n                    coords: rgba.slice(0, 3),\n                    alpha: rgba.slice(3)[0]\n                };\n            },\n            serialize: (coords, alpha, { collapse = true // collapse to 3-4 digit hex when possible?\n             } = {})=>{\n                if (alpha < 1) {\n                    coords.push(alpha);\n                }\n                coords = coords.map((c)=>Math.round(c * 255));\n                let collapsible = collapse && coords.every((c)=>c % 17 === 0);\n                let hex = coords.map((c)=>{\n                    if (collapsible) {\n                        return (c / 17).toString(16);\n                    }\n                    return c.toString(16).padStart(2, \"0\");\n                }).join(\"\");\n                return \"#\" + hex;\n            }\n        },\n        \"keyword\": {\n            type: \"custom\",\n            test: (str)=>/^[a-z]+$/i.test(str),\n            parse (str) {\n                str = str.toLowerCase();\n                let ret = {\n                    spaceId: \"srgb\",\n                    coords: null,\n                    alpha: 1\n                };\n                if (str === \"transparent\") {\n                    ret.coords = KEYWORDS.black;\n                    ret.alpha = 0;\n                } else {\n                    ret.coords = KEYWORDS[str];\n                }\n                if (ret.coords) {\n                    return ret;\n                }\n            }\n        }\n    }\n});\nvar P3 = new RGBColorSpace({\n    id: \"p3\",\n    name: \"P3\",\n    base: P3Linear,\n    // Gamma encoding/decoding is the same as sRGB\n    fromBase: sRGB.fromBase,\n    toBase: sRGB.toBase,\n    formats: {\n        color: {\n            id: \"display-p3\"\n        }\n    }\n});\n// Default space for CSS output. Code in Color.js makes this wider if there's a DOM available\ndefaults.display_space = sRGB;\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n    // Find widest supported color space for CSS\n    for (let space of [\n        lab,\n        REC2020,\n        P3\n    ]){\n        let coords = space.getMinCoords();\n        let color = {\n            space,\n            coords,\n            alpha: 1\n        };\n        let str = serialize(color);\n        if (CSS.supports(\"color\", str)) {\n            defaults.display_space = space;\n            break;\n        }\n    }\n}\n/**\n * Returns a serialization of the color that can actually be displayed in the browser.\n * If the default serialization can be displayed, it is returned.\n * Otherwise, the color is converted to Lab, REC2020, or P3, whichever is the widest supported.\n * In Node.js, this is basically equivalent to `serialize()` but returns a `String` object instead.\n *\n * @export\n * @param {{space, coords} | Color | string} color\n * @param {*} [options={}] Options to be passed to serialize()\n * @param {ColorSpace | string} [options.space = defaults.display_space] Color space to use for serialization if default is not supported\n * @returns {String} String object containing the serialized color with a color property containing the converted color (or the original, if no conversion was necessary)\n */ function display(color, { space = defaults.display_space, ...options } = {}) {\n    let ret = serialize(color, options);\n    if (typeof CSS === \"undefined\" || CSS.supports(\"color\", ret) || !defaults.display_space) {\n        ret = new String(ret);\n        ret.color = color;\n    } else {\n        // If we're here, what we were about to output is not supported\n        // Fall back to fallback space\n        let fallbackColor = to(color, space);\n        ret = new String(serialize(fallbackColor, options));\n        ret.color = fallbackColor;\n    }\n    return ret;\n}\n/**\n * Euclidean distance of colors in an arbitrary color space\n */ function distance(color1, color2, space = \"lab\") {\n    space = ColorSpace.get(space);\n    let coords1 = space.from(color1);\n    let coords2 = space.from(color2);\n    return Math.sqrt(coords1.reduce((acc, c1, i)=>{\n        let c2 = coords2[i];\n        if (isNaN(c1) || isNaN(c2)) {\n            return acc;\n        }\n        return acc + (c2 - c1) ** 2;\n    }, 0));\n}\nfunction equals(color1, color2) {\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    return color1.space === color2.space && color1.alpha === color2.alpha && color1.coords.every((c, i)=>c === color2.coords[i]);\n}\n/**\n * Relative luminance\n */ function getLuminance(color) {\n    return get(color, [\n        XYZ_D65,\n        \"y\"\n    ]);\n}\nfunction setLuminance(color, value) {\n    set(color, [\n        XYZ_D65,\n        \"y\"\n    ], value);\n}\nfunction register$2(Color) {\n    Object.defineProperty(Color.prototype, \"luminance\", {\n        get () {\n            return getLuminance(this);\n        },\n        set (value) {\n            setLuminance(this, value);\n        }\n    });\n}\nvar luminance = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    getLuminance: getLuminance,\n    register: register$2,\n    setLuminance: setLuminance\n});\n// WCAG 2.0 contrast https://www.w3.org/TR/WCAG20-TECHS/G18.html\n// Simple contrast, with fixed 5% viewing flare contribution\n// Symmetric, does not matter which is foreground and which is background\nfunction contrastWCAG21(color1, color2) {\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    let Y1 = Math.max(getLuminance(color1), 0);\n    let Y2 = Math.max(getLuminance(color2), 0);\n    if (Y2 > Y1) {\n        [Y1, Y2] = [\n            Y2,\n            Y1\n        ];\n    }\n    return (Y1 + .05) / (Y2 + .05);\n}\n// APCA 0.0.98G\n// https://github.com/Myndex/apca-w3\n// see also https://github.com/w3c/silver/issues/643\n// exponents\nconst normBG = 0.56;\nconst normTXT = 0.57;\nconst revTXT = 0.62;\nconst revBG = 0.65;\n// clamps\nconst blkThrs = 0.022;\nconst blkClmp = 1.414;\nconst loClip = 0.1;\nconst deltaYmin = 0.0005;\n// scalers\n// see https://github.com/w3c/silver/issues/645\nconst scaleBoW = 1.14;\nconst loBoWoffset = 0.027;\nconst scaleWoB = 1.14;\nfunction fclamp(Y) {\n    if (Y >= blkThrs) {\n        return Y;\n    }\n    return Y + (blkThrs - Y) ** blkClmp;\n}\nfunction linearize(val) {\n    let sign = val < 0 ? -1 : 1;\n    let abs = Math.abs(val);\n    return sign * Math.pow(abs, 2.4);\n}\n// Not symmetric, requires a foreground (text) color, and a background color\nfunction contrastAPCA(background, foreground) {\n    foreground = getColor(foreground);\n    background = getColor(background);\n    let S;\n    let C;\n    let Sapc;\n    // Myndex as-published, assumes sRGB inputs\n    let R, G, B;\n    foreground = to(foreground, \"srgb\");\n    // Should these be clamped to in-gamut values?\n    // Calculates \"screen luminance\" with non-standard simple gamma EOTF\n    // weights should be from CSS Color 4, not the ones here which are via Myndex and copied from Lindbloom\n    [R, G, B] = foreground.coords;\n    let lumTxt = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;\n    background = to(background, \"srgb\");\n    [R, G, B] = background.coords;\n    let lumBg = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;\n    // toe clamping of very dark values to account for flare\n    let Ytxt = fclamp(lumTxt);\n    let Ybg = fclamp(lumBg);\n    // are we \"Black on White\" (dark on light), or light on dark?\n    let BoW = Ybg > Ytxt;\n    // why is this a delta, when Y is not perceptually uniform?\n    // Answer: it is a noise gate, see\n    // https://github.com/LeaVerou/color.js/issues/208\n    if (Math.abs(Ybg - Ytxt) < deltaYmin) {\n        C = 0;\n    } else {\n        if (BoW) {\n            // dark text on light background\n            S = Ybg ** normBG - Ytxt ** normTXT;\n            C = S * scaleBoW;\n        } else {\n            // light text on dark background\n            S = Ybg ** revBG - Ytxt ** revTXT;\n            C = S * scaleWoB;\n        }\n    }\n    if (Math.abs(C) < loClip) {\n        Sapc = 0;\n    } else if (C > 0) {\n        // not clear whether Woffset is loBoWoffset or loWoBoffset\n        // but they have the same value\n        Sapc = C - loBoWoffset;\n    } else {\n        Sapc = C + loBoWoffset;\n    }\n    return Sapc * 100;\n}\n// Michelson  luminance contrast\n// the relation between the spread and the sum of the two luminances\n// Symmetric, does not matter which is foreground and which is background\n// No black level compensation for flare.\nfunction contrastMichelson(color1, color2) {\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    let Y1 = Math.max(getLuminance(color1), 0);\n    let Y2 = Math.max(getLuminance(color2), 0);\n    if (Y2 > Y1) {\n        [Y1, Y2] = [\n            Y2,\n            Y1\n        ];\n    }\n    let denom = Y1 + Y2;\n    return denom === 0 ? 0 : (Y1 - Y2) / denom;\n}\n// Weber luminance contrast\n// The difference between the two luminances divided by the lower luminance\n// Symmetric, does not matter which is foreground and which is background\n// No black level compensation for flare.\n// the darkest sRGB color above black is #000001 and this produces\n// a plain Weber contrast of ~45647.\n// So, setting the divide-by-zero result at 50000 is a reasonable\n// max clamp for the plain Weber\nconst max = 50000;\nfunction contrastWeber(color1, color2) {\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    let Y1 = Math.max(getLuminance(color1), 0);\n    let Y2 = Math.max(getLuminance(color2), 0);\n    if (Y2 > Y1) {\n        [Y1, Y2] = [\n            Y2,\n            Y1\n        ];\n    }\n    return Y2 === 0 ? max : (Y1 - Y2) / Y2;\n}\n// CIE Lightness difference, as used by Google Material Design\n// Google HCT Tone is the same as CIE Lightness\n// https://material.io/blog/science-of-color-design\nfunction contrastLstar(color1, color2) {\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    let L1 = get(color1, [\n        lab,\n        \"l\"\n    ]);\n    let L2 = get(color2, [\n        lab,\n        \"l\"\n    ]);\n    return Math.abs(L1 - L2);\n}\n// κ * ε  = 2^3 = 8\nconst ε$1 = 216 / 24389; // 6^3/29^3 == (24/116)^3\nconst ε3 = 24 / 116;\nconst κ = 24389 / 27; // 29^3/3^3\nlet white = WHITES.D65;\nvar lab_d65 = new ColorSpace({\n    id: \"lab-d65\",\n    name: \"Lab D65\",\n    coords: {\n        l: {\n            refRange: [\n                0,\n                100\n            ],\n            name: \"L\"\n        },\n        a: {\n            refRange: [\n                -125,\n                125\n            ]\n        },\n        b: {\n            refRange: [\n                -125,\n                125\n            ]\n        }\n    },\n    // Assuming XYZ is relative to D65, convert to CIE Lab\n    // from CIE standard, which now defines these as a rational fraction\n    white,\n    base: XYZ_D65,\n    // Convert D65-adapted XYZ to Lab\n    //  CIE 15.3:2004 section 8.2.1.1\n    fromBase (XYZ) {\n        // compute xyz, which is XYZ scaled relative to reference white\n        let xyz = XYZ.map((value, i)=>value / white[i]);\n        // now compute f\n        let f = xyz.map((value)=>value > ε$1 ? Math.cbrt(value) : (κ * value + 16) / 116);\n        return [\n            116 * f[1] - 16,\n            500 * (f[0] - f[1]),\n            200 * (f[1] - f[2] // b\n            )\n        ];\n    },\n    // Convert Lab to D65-adapted XYZ\n    // Same result as CIE 15.3:2004 Appendix D although the derivation is different\n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    toBase (Lab) {\n        // compute f, starting with the luminance-related term\n        let f = [];\n        f[1] = (Lab[0] + 16) / 116;\n        f[0] = Lab[1] / 500 + f[1];\n        f[2] = f[1] - Lab[2] / 200;\n        // compute xyz\n        let xyz = [\n            f[0] > ε3 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / κ,\n            Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ,\n            f[2] > ε3 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / κ\n        ];\n        // Compute XYZ by scaling xyz by reference white\n        return xyz.map((value, i)=>value * white[i]);\n    },\n    formats: {\n        \"lab-d65\": {\n            coords: [\n                \"<number> | <percentage>\",\n                \"<number> | <percentage>[-1,1]\",\n                \"<number> | <percentage>[-1,1]\"\n            ]\n        }\n    }\n});\n// Delta Phi Star perceptual lightness contrast\n// See https://github.com/Myndex/deltaphistar\n// The (difference between two Lstars each raised to phi) raised to (1/phi)\n// Symmetric, does not matter which is foreground and which is background\nconst phi = Math.pow(5, 0.5) * 0.5 + 0.5; // Math.phi can be used if Math.js\nfunction contrastDeltaPhi(color1, color2) {\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    let Lstr1 = get(color1, [\n        lab_d65,\n        \"l\"\n    ]);\n    let Lstr2 = get(color2, [\n        lab_d65,\n        \"l\"\n    ]);\n    let deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));\n    let contrast = Math.pow(deltaPhiStar, 1 / phi) * Math.SQRT2 - 40;\n    return contrast < 7.5 ? 0.0 : contrast;\n}\nvar contrastMethods = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    contrastAPCA: contrastAPCA,\n    contrastDeltaPhi: contrastDeltaPhi,\n    contrastLstar: contrastLstar,\n    contrastMichelson: contrastMichelson,\n    contrastWCAG21: contrastWCAG21,\n    contrastWeber: contrastWeber\n});\nfunction contrast(background, foreground, o = {}) {\n    if (isString(o)) {\n        o = {\n            algorithm: o\n        };\n    }\n    let { algorithm, ...rest } = o;\n    if (!algorithm) {\n        let algorithms = Object.keys(contrastMethods).map((a)=>a.replace(/^contrast/, \"\")).join(\", \");\n        throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${algorithms}`);\n    }\n    background = getColor(background);\n    foreground = getColor(foreground);\n    for(let a in contrastMethods){\n        if (\"contrast\" + algorithm.toLowerCase() === a.toLowerCase()) {\n            return contrastMethods[a](background, foreground, rest);\n        }\n    }\n    throw new TypeError(`Unknown contrast algorithm: ${algorithm}`);\n}\n// Chromaticity coordinates\nfunction uv(color) {\n    let [X, Y, Z] = getAll(color, XYZ_D65);\n    let denom = X + 15 * Y + 3 * Z;\n    return [\n        4 * X / denom,\n        9 * Y / denom\n    ];\n}\nfunction xy(color) {\n    let [X, Y, Z] = getAll(color, XYZ_D65);\n    let sum = X + Y + Z;\n    return [\n        X / sum,\n        Y / sum\n    ];\n}\nfunction register$1(Color) {\n    // no setters, as lightness information is lost\n    // when converting color to chromaticity\n    Object.defineProperty(Color.prototype, \"uv\", {\n        get () {\n            return uv(this);\n        }\n    });\n    Object.defineProperty(Color.prototype, \"xy\", {\n        get () {\n            return xy(this);\n        }\n    });\n}\nvar chromaticity = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    register: register$1,\n    uv: uv,\n    xy: xy\n});\nfunction deltaE76(color, sample) {\n    return distance(color, sample, \"lab\");\n}\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n// CMC by the Color Measurement Committee of the\n// Bradford Society of Dyeists and Colorsts, 1994.\n// Uses LCH rather than Lab,\n// with different weights for L, C and H differences\n// A nice increase in accuracy for modest increase in complexity\nconst π = Math.PI;\nconst d2r = π / 180;\nfunction deltaECMC(color, sample, { l = 2, c = 1 } = {}) {\n    // Given this color as the reference\n    // and a sample,\n    // calculate deltaE CMC.\n    // This implementation assumes the parametric\n    // weighting factors l:c are 2:1\n    // which is typical for non-textile uses.\n    let [L1, a1, b1] = lab.from(color);\n    let [, C1, H1] = lch.from(lab, [\n        L1,\n        a1,\n        b1\n    ]);\n    let [L2, a2, b2] = lab.from(sample);\n    let C2 = lch.from(lab, [\n        L2,\n        a2,\n        b2\n    ])[1];\n    // let [L1, a1, b1] = color.getAll(lab);\n    // let C1 = color.get(\"lch.c\");\n    // let H1 = color.get(\"lch.h\");\n    // let [L2, a2, b2] = sample.getAll(lab);\n    // let C2 = sample.get(\"lch.c\");\n    // Check for negative Chroma,\n    // which might happen through\n    // direct user input of LCH values\n    if (C1 < 0) {\n        C1 = 0;\n    }\n    if (C2 < 0) {\n        C2 = 0;\n    }\n    // we don't need H2 as ΔH is calculated from Δa, Δb and ΔC\n    // Lightness and Chroma differences\n    // These are (color - sample), unlike deltaE2000\n    let ΔL = L1 - L2;\n    let ΔC = C1 - C2;\n    let Δa = a1 - a2;\n    let Δb = b1 - b2;\n    // weighted Hue difference, less for larger Chroma difference\n    let H2 = Δa ** 2 + Δb ** 2 - ΔC ** 2;\n    // due to roundoff error it is possible that, for zero a and b,\n    // ΔC > Δa + Δb is 0, resulting in attempting\n    // to take the square root of a negative number\n    // trying instead the equation from Industrial Color Physics\n    // By Georg A. Klein\n    // let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));\n    // console.log({ΔH});\n    // This gives the same result to 12 decimal places\n    // except it sometimes NaNs when trying to root a negative number\n    // let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!\n    // positional corrections to the lack of uniformity of CIELAB\n    // These are all trying to make JND ellipsoids more like spheres\n    // SL Lightness crispening factor, depends entirely on L1 not L2\n    let SL = 0.511; // linear portion of the Y to L transfer function\n    if (L1 >= 16) {\n        SL = 0.040975 * L1 / (1 + 0.01765 * L1);\n    }\n    // SC Chroma factor\n    let SC = 0.0638 * C1 / (1 + 0.0131 * C1) + 0.638;\n    // Cross term T for blue non-linearity\n    let T;\n    if (Number.isNaN(H1)) {\n        H1 = 0;\n    }\n    if (H1 >= 164 && H1 <= 345) {\n        T = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));\n    } else {\n        T = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));\n    }\n    // console.log({T});\n    // SH Hue factor also depends on C1,\n    let C4 = Math.pow(C1, 4);\n    let F = Math.sqrt(C4 / (C4 + 1900));\n    let SH = SC * (F * T + 1 - F);\n    // Finally calculate the deltaE, term by term as root sume of squares\n    let dE = (ΔL / (l * SL)) ** 2;\n    dE += (ΔC / (c * SC)) ** 2;\n    dE += H2 / SH ** 2;\n    // dE += (ΔH / SH)  ** 2;\n    return Math.sqrt(dE);\n// Yay!!!\n}\nconst Yw$1 = 203; // absolute luminance of media white\nvar XYZ_Abs_D65 = new ColorSpace({\n    // Absolute CIE XYZ, with a D65 whitepoint,\n    // as used in most HDR colorspaces as a starting point.\n    // SDR spaces are converted per BT.2048\n    // so that diffuse, media white is 203 cd/m²\n    id: \"xyz-abs-d65\",\n    name: \"Absolute XYZ D65\",\n    coords: {\n        x: {\n            refRange: [\n                0,\n                9504.7\n            ],\n            name: \"Xa\"\n        },\n        y: {\n            refRange: [\n                0,\n                10000\n            ],\n            name: \"Ya\"\n        },\n        z: {\n            refRange: [\n                0,\n                10888.3\n            ],\n            name: \"Za\"\n        }\n    },\n    base: XYZ_D65,\n    fromBase (XYZ) {\n        // Make XYZ absolute, not relative to media white\n        // Maximum luminance in PQ is 10,000 cd/m²\n        // Relative XYZ has Y=1 for media white\n        return XYZ.map((v)=>Math.max(v * Yw$1, 0));\n    },\n    toBase (AbsXYZ) {\n        // Convert to media-white relative XYZ\n        return AbsXYZ.map((v)=>Math.max(v / Yw$1, 0));\n    }\n});\nconst b$1 = 1.15;\nconst g = 0.66;\nconst n$1 = 2610 / 2 ** 14;\nconst ninv$1 = 2 ** 14 / 2610;\nconst c1$2 = 3424 / 2 ** 12;\nconst c2$2 = 2413 / 2 ** 7;\nconst c3$2 = 2392 / 2 ** 7;\nconst p = 1.7 * 2523 / 2 ** 5;\nconst pinv = 2 ** 5 / (1.7 * 2523);\nconst d = -0.56;\nconst d0 = 1.6295499532821566E-11;\nconst XYZtoCone_M = [\n    [\n        0.41478972,\n        0.579999,\n        0.0146480\n    ],\n    [\n        -0.2015100,\n        1.120649,\n        0.0531008\n    ],\n    [\n        -0.0166008,\n        0.264800,\n        0.6684799\n    ]\n];\n// XYZtoCone_M inverted\nconst ConetoXYZ_M = [\n    [\n        1.9242264357876067,\n        -1.0047923125953657,\n        0.037651404030618\n    ],\n    [\n        0.35031676209499907,\n        0.7264811939316552,\n        -0.06538442294808501\n    ],\n    [\n        -0.09098281098284752,\n        -0.3127282905230739,\n        1.5227665613052603\n    ]\n];\nconst ConetoIab_M = [\n    [\n        0.5,\n        0.5,\n        0\n    ],\n    [\n        3.524000,\n        -4.066708,\n        0.542708\n    ],\n    [\n        0.199076,\n        1.096799,\n        -1.295875\n    ]\n];\n// ConetoIab_M inverted\nconst IabtoCone_M = [\n    [\n        1,\n        0.1386050432715393,\n        0.05804731615611886\n    ],\n    [\n        0.9999999999999999,\n        -0.1386050432715393,\n        -0.05804731615611886\n    ],\n    [\n        0.9999999999999998,\n        -0.09601924202631895,\n        -0.8118918960560388\n    ]\n];\nvar Jzazbz = new ColorSpace({\n    id: \"jzazbz\",\n    name: \"Jzazbz\",\n    coords: {\n        jz: {\n            refRange: [\n                0,\n                1\n            ],\n            name: \"Jz\"\n        },\n        az: {\n            refRange: [\n                -0.5,\n                0.5\n            ]\n        },\n        bz: {\n            refRange: [\n                -0.5,\n                0.5\n            ]\n        }\n    },\n    base: XYZ_Abs_D65,\n    fromBase (XYZ) {\n        // First make XYZ absolute, not relative to media white\n        // Maximum luminance in PQ is 10,000 cd/m²\n        // Relative XYZ has Y=1 for media white\n        // BT.2048 says media white Y=203 at PQ 58\n        let [Xa, Ya, Za] = XYZ;\n        // modify X and Y\n        let Xm = b$1 * Xa - (b$1 - 1) * Za;\n        let Ym = g * Ya - (g - 1) * Xa;\n        // move to LMS cone domain\n        let LMS = multiplyMatrices(XYZtoCone_M, [\n            Xm,\n            Ym,\n            Za\n        ]);\n        // PQ-encode LMS\n        let PQLMS = LMS.map(function(val) {\n            let num = c1$2 + c2$2 * (val / 10000) ** n$1;\n            let denom = 1 + c3$2 * (val / 10000) ** n$1;\n            return (num / denom) ** p;\n        });\n        // almost there, calculate Iz az bz\n        let [Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS);\n        // console.log({Iz, az, bz});\n        let Jz = (1 + d) * Iz / (1 + d * Iz) - d0;\n        return [\n            Jz,\n            az,\n            bz\n        ];\n    },\n    toBase (Jzazbz) {\n        let [Jz, az, bz] = Jzazbz;\n        let Iz = (Jz + d0) / (1 + d - d * (Jz + d0));\n        // bring into LMS cone domain\n        let PQLMS = multiplyMatrices(IabtoCone_M, [\n            Iz,\n            az,\n            bz\n        ]);\n        // convert from PQ-coded to linear-light\n        let LMS = PQLMS.map(function(val) {\n            let num = c1$2 - val ** pinv;\n            let denom = c3$2 * val ** pinv - c2$2;\n            let x = 10000 * (num / denom) ** ninv$1;\n            return x; // luminance relative to diffuse white, [0, 70 or so].\n        });\n        // modified abs XYZ\n        let [Xm, Ym, Za] = multiplyMatrices(ConetoXYZ_M, LMS);\n        // restore standard D50 relative XYZ, relative to media white\n        let Xa = (Xm + (b$1 - 1) * Za) / b$1;\n        let Ya = (Ym + (g - 1) * Xa) / g;\n        return [\n            Xa,\n            Ya,\n            Za\n        ];\n    },\n    formats: {\n        // https://drafts.csswg.org/css-color-hdr/#Jzazbz\n        \"color\": {}\n    }\n});\nvar jzczhz = new ColorSpace({\n    id: \"jzczhz\",\n    name: \"JzCzHz\",\n    coords: {\n        jz: {\n            refRange: [\n                0,\n                1\n            ],\n            name: \"Jz\"\n        },\n        cz: {\n            refRange: [\n                0,\n                1\n            ],\n            name: \"Chroma\"\n        },\n        hz: {\n            refRange: [\n                0,\n                360\n            ],\n            type: \"angle\",\n            name: \"Hue\"\n        }\n    },\n    base: Jzazbz,\n    fromBase (jzazbz) {\n        // Convert to polar form\n        let [Jz, az, bz] = jzazbz;\n        let hue;\n        const ε = 0.0002; // chromatic components much smaller than a,b\n        if (Math.abs(az) < ε && Math.abs(bz) < ε) {\n            hue = NaN;\n        } else {\n            hue = Math.atan2(bz, az) * 180 / Math.PI;\n        }\n        return [\n            Jz,\n            Math.sqrt(az ** 2 + bz ** 2),\n            constrain(hue) // Hue, in degrees [0 to 360)\n        ];\n    },\n    toBase (jzczhz) {\n        // Convert from polar form\n        // debugger;\n        return [\n            jzczhz[0],\n            jzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180),\n            jzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180) // bz\n        ];\n    },\n    formats: {\n        color: {}\n    }\n});\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n// Uses JzCzHz, which has improved perceptual uniformity\n// and thus a simple Euclidean root-sum of ΔL² ΔC² ΔH²\n// gives good results.\nfunction deltaEJz(color, sample) {\n    // Given this color as the reference\n    // and a sample,\n    // calculate deltaE in JzCzHz.\n    let [Jz1, Cz1, Hz1] = jzczhz.from(color);\n    let [Jz2, Cz2, Hz2] = jzczhz.from(sample);\n    // Lightness and Chroma differences\n    // sign does not matter as they are squared.\n    let ΔJ = Jz1 - Jz2;\n    let ΔC = Cz1 - Cz2;\n    // length of chord for ΔH\n    if (Number.isNaN(Hz1) && Number.isNaN(Hz2)) {\n        // both undefined hues\n        Hz1 = 0;\n        Hz2 = 0;\n    } else if (Number.isNaN(Hz1)) {\n        // one undefined, set to the defined hue\n        Hz1 = Hz2;\n    } else if (Number.isNaN(Hz2)) {\n        Hz2 = Hz1;\n    }\n    let Δh = Hz1 - Hz2;\n    let ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(Δh / 2 * (Math.PI / 180));\n    return Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);\n}\nconst c1$1 = 3424 / 4096;\nconst c2$1 = 2413 / 128;\nconst c3$1 = 2392 / 128;\nconst m1 = 2610 / 16384;\nconst m2 = 2523 / 32;\nconst im1 = 16384 / 2610;\nconst im2 = 32 / 2523;\n// The matrix below includes the 4% crosstalk components\n// and is from the Dolby \"What is ICtCp\" paper\"\nconst XYZtoLMS_M$1 = [\n    [\n        0.3592,\n        0.6976,\n        -0.0358\n    ],\n    [\n        -0.1922,\n        1.1004,\n        0.0755\n    ],\n    [\n        0.0070,\n        0.0749,\n        0.8434\n    ]\n];\n// linear-light Rec.2020 to LMS, again with crosstalk\n// rational terms from Jan Fröhlich,\n// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97\n// and ITU-R BT.2124-0 p.2\n/*\nconst Rec2020toLMS_M = [\n\t[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],\n\t[  683 / 4096,  2951 / 4096,   462 / 4096 ],\n\t[   99 / 4096,   309 / 4096,  3688 / 4096 ]\n];\n*/ // this includes the Ebner LMS coefficients,\n// the rotation, and the scaling to [-0.5,0.5] range\n// rational terms from Fröhlich p.97\n// and ITU-R BT.2124-0 pp.2-3\nconst LMStoIPT_M = [\n    [\n        2048 / 4096,\n        2048 / 4096,\n        0\n    ],\n    [\n        6610 / 4096,\n        -13613 / 4096,\n        7003 / 4096\n    ],\n    [\n        17933 / 4096,\n        -17390 / 4096,\n        -543 / 4096\n    ]\n];\n// inverted matrices, calculated from the above\nconst IPTtoLMS_M = [\n    [\n        0.99998889656284013833,\n        0.00860505014728705821,\n        0.1110343715986164786\n    ],\n    [\n        1.0000111034371598616,\n        -0.00860505014728705821,\n        -0.1110343715986164786\n    ],\n    [\n        1.000032063391005412,\n        0.56004913547279000113,\n        -0.32063391005412026469\n    ]\n];\n/*\nconst LMStoRec2020_M = [\n\t[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],\n\t[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],\n\t[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]\n];\n*/ const LMStoXYZ_M$1 = [\n    [\n        2.0701800566956135096,\n        -1.3264568761030210255,\n        0.20661600684785517081\n    ],\n    [\n        0.36498825003265747974,\n        0.68046736285223514102,\n        -0.045421753075853231409\n    ],\n    [\n        -0.049595542238932107896,\n        -0.049421161186757487412,\n        1.1879959417328034394\n    ]\n];\n// Only the PQ form of ICtCp is implemented here. There is also an HLG form.\n// from Dolby, \"WHAT IS ICTCP?\"\n// https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf\n// and\n// Dolby, \"Perceptual Color Volume\n// Measuring the Distinguishable Colors of HDR and WCG Displays\"\n// https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf\nvar ictcp = new ColorSpace({\n    id: \"ictcp\",\n    name: \"ICTCP\",\n    // From BT.2100-2 page 7:\n    // During production, signal values are expected to exceed the\n    // range E′ = [0.0 : 1.0]. This provides processing headroom and avoids\n    // signal degradation during cascaded processing. Such values of E′,\n    // below 0.0 or exceeding 1.0, should not be clipped during production\n    // and exchange.\n    // Values below 0.0 should not be clipped in reference displays (even\n    // though they represent “negative” light) to allow the black level of\n    // the signal (LB) to be properly set using test signals known as “PLUGE”\n    coords: {\n        i: {\n            refRange: [\n                0,\n                1\n            ],\n            name: \"I\"\n        },\n        ct: {\n            refRange: [\n                -0.5,\n                0.5\n            ],\n            name: \"CT\"\n        },\n        cp: {\n            refRange: [\n                -0.5,\n                0.5\n            ],\n            name: \"CP\"\n        }\n    },\n    base: XYZ_Abs_D65,\n    fromBase (XYZ) {\n        // move to LMS cone domain\n        let LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);\n        return LMStoICtCp(LMS);\n    },\n    toBase (ICtCp) {\n        let LMS = ICtCptoLMS(ICtCp);\n        return multiplyMatrices(LMStoXYZ_M$1, LMS);\n    },\n    formats: {\n        color: {}\n    }\n});\nfunction LMStoICtCp(LMS) {\n    // apply the PQ EOTF\n    // we can't ever be dividing by zero because of the \"1 +\" in the denominator\n    let PQLMS = LMS.map(function(val) {\n        let num = c1$1 + c2$1 * (val / 10000) ** m1;\n        let denom = 1 + c3$1 * (val / 10000) ** m1;\n        return (num / denom) ** m2;\n    });\n    // LMS to IPT, with rotation for Y'C'bC'r compatibility\n    return multiplyMatrices(LMStoIPT_M, PQLMS);\n}\nfunction ICtCptoLMS(ICtCp) {\n    let PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);\n    // From BT.2124-0 Annex 2 Conversion 3\n    let LMS = PQLMS.map(function(val) {\n        let num = Math.max(val ** im2 - c1$1, 0);\n        let denom = c2$1 - c3$1 * val ** im2;\n        return 10000 * (num / denom) ** im1;\n    });\n    return LMS;\n}\n// Delta E in ICtCp space,\n// which the ITU calls Delta E ITP, which is shorter\n// formulae from ITU Rec. ITU-R BT.2124-0\nfunction deltaEITP(color, sample) {\n    // Given this color as the reference\n    // and a sample,\n    // calculate deltaE in ICtCp\n    // which is simply the Euclidean distance\n    let [I1, T1, P1] = ictcp.from(color);\n    let [I2, T2, P2] = ictcp.from(sample);\n    // the 0.25 factor is to undo the encoding scaling in Ct\n    // the 720 is so that 1 deltaE = 1 JND\n    // per  ITU-R BT.2124-0 p.3\n    return 720 * Math.sqrt((I1 - I2) ** 2 + 0.25 * (T1 - T2) ** 2 + (P1 - P2) ** 2);\n}\n// Recalculated for consistent reference white\n// see https://github.com/w3c/csswg-drafts/issues/6642#issuecomment-943521484\nconst XYZtoLMS_M = [\n    [\n        0.8190224432164319,\n        0.3619062562801221,\n        -0.12887378261216414\n    ],\n    [\n        0.0329836671980271,\n        0.9292868468965546,\n        0.03614466816999844\n    ],\n    [\n        0.048177199566046255,\n        0.26423952494422764,\n        0.6335478258136937\n    ]\n];\n// inverse of XYZtoLMS_M\nconst LMStoXYZ_M = [\n    [\n        1.2268798733741557,\n        -0.5578149965554813,\n        0.28139105017721583\n    ],\n    [\n        -0.04057576262431372,\n        1.1122868293970594,\n        -0.07171106666151701\n    ],\n    [\n        -0.07637294974672142,\n        -0.4214933239627914,\n        1.5869240244272418\n    ]\n];\nconst LMStoLab_M = [\n    [\n        0.2104542553,\n        0.7936177850,\n        -0.0040720468\n    ],\n    [\n        1.9779984951,\n        -2.4285922050,\n        0.4505937099\n    ],\n    [\n        0.0259040371,\n        0.7827717662,\n        -0.8086757660\n    ]\n];\n// LMStoIab_M inverted\nconst LabtoLMS_M = [\n    [\n        0.99999999845051981432,\n        0.39633779217376785678,\n        0.21580375806075880339\n    ],\n    [\n        1.0000000088817607767,\n        -0.1055613423236563494,\n        -0.063854174771705903402\n    ],\n    [\n        1.0000000546724109177,\n        -0.089484182094965759684,\n        -1.2914855378640917399\n    ]\n];\nvar OKLab = new ColorSpace({\n    id: \"oklab\",\n    name: \"Oklab\",\n    coords: {\n        l: {\n            refRange: [\n                0,\n                1\n            ],\n            name: \"L\"\n        },\n        a: {\n            refRange: [\n                -0.4,\n                0.4\n            ]\n        },\n        b: {\n            refRange: [\n                -0.4,\n                0.4\n            ]\n        }\n    },\n    // Note that XYZ is relative to D65\n    white: \"D65\",\n    base: XYZ_D65,\n    fromBase (XYZ) {\n        // move to LMS cone domain\n        let LMS = multiplyMatrices(XYZtoLMS_M, XYZ);\n        // non-linearity\n        let LMSg = LMS.map((val)=>Math.cbrt(val));\n        return multiplyMatrices(LMStoLab_M, LMSg);\n    },\n    toBase (OKLab) {\n        // move to LMS cone domain\n        let LMSg = multiplyMatrices(LabtoLMS_M, OKLab);\n        // restore linearity\n        let LMS = LMSg.map((val)=>val ** 3);\n        return multiplyMatrices(LMStoXYZ_M, LMS);\n    },\n    formats: {\n        \"oklab\": {\n            coords: [\n                \"<percentage> | <number>\",\n                \"<number> | <percentage>[-1,1]\",\n                \"<number> | <percentage>[-1,1]\"\n            ]\n        }\n    }\n});\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in CIE Lab\nfunction deltaEOK(color, sample) {\n    // Given this color as the reference\n    // and a sample,\n    // calculate deltaEOK, term by term as root sum of squares\n    let [L1, a1, b1] = OKLab.from(color);\n    let [L2, a2, b2] = OKLab.from(sample);\n    let ΔL = L1 - L2;\n    let Δa = a1 - a2;\n    let Δb = b1 - b2;\n    return Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);\n}\nvar deltaEMethods = {\n    deltaE76,\n    deltaECMC,\n    deltaE2000,\n    deltaEJz,\n    deltaEITP,\n    deltaEOK\n};\nfunction deltaE(c1, c2, o = {}) {\n    if (isString(o)) {\n        o = {\n            method: o\n        };\n    }\n    let { method = defaults.deltaE, ...rest } = o;\n    c1 = getColor(c1);\n    c2 = getColor(c2);\n    for(let m in deltaEMethods){\n        if (\"deltae\" + method.toLowerCase() === m.toLowerCase()) {\n            return deltaEMethods[m](c1, c2, rest);\n        }\n    }\n    throw new TypeError(`Unknown deltaE method: ${method}`);\n}\nfunction lighten(color, amount = .25) {\n    let space = ColorSpace.get(\"oklch\", \"lch\");\n    let lightness = [\n        space,\n        \"l\"\n    ];\n    return set(color, lightness, (l)=>l * (1 + amount));\n}\nfunction darken(color, amount = .25) {\n    let space = ColorSpace.get(\"oklch\", \"lch\");\n    let lightness = [\n        space,\n        \"l\"\n    ];\n    return set(color, lightness, (l)=>l * (1 - amount));\n}\nvar variations = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    darken: darken,\n    lighten: lighten\n});\n/**\n * Functions related to color interpolation\n */ /**\n * Return an intermediate color between two colors\n * Signatures: mix(c1, c2, p, options)\n *             mix(c1, c2, options)\n *             mix(color)\n * @param {Color | string} c1 The first color\n * @param {Color | string} [c2] The second color\n * @param {number} [p=.5] A 0-1 percentage where 0 is c1 and 1 is c2\n * @param {Object} [o={}]\n * @return {Color}\n */ function mix(c1, c2, p = .5, o = {}) {\n    [c1, c2] = [\n        getColor(c1),\n        getColor(c2)\n    ];\n    if (type(p) === \"object\") {\n        [p, o] = [\n            .5,\n            p\n        ];\n    }\n    let { space, outputSpace, premultiplied } = o;\n    let r = range(c1, c2, {\n        space,\n        outputSpace,\n        premultiplied\n    });\n    return r(p);\n}\n/**\n *\n * @param {Color | string | Function} c1 The first color or a range\n * @param {Color | string} [c2] The second color if c1 is not a range\n * @param {Object} [options={}]\n * @return {Color[]}\n */ function steps(c1, c2, options = {}) {\n    let colorRange;\n    if (isRange(c1)) {\n        // Tweaking existing range\n        [colorRange, options] = [\n            c1,\n            c2\n        ];\n        [c1, c2] = colorRange.rangeArgs.colors;\n    }\n    let { maxDeltaE, deltaEMethod, steps = 2, maxSteps = 1000, ...rangeOptions } = options;\n    if (!colorRange) {\n        [c1, c2] = [\n            getColor(c1),\n            getColor(c2)\n        ];\n        colorRange = range(c1, c2, rangeOptions);\n    }\n    let totalDelta = deltaE(c1, c2);\n    let actualSteps = maxDeltaE > 0 ? Math.max(steps, Math.ceil(totalDelta / maxDeltaE) + 1) : steps;\n    let ret = [];\n    if (maxSteps !== undefined) {\n        actualSteps = Math.min(actualSteps, maxSteps);\n    }\n    if (actualSteps === 1) {\n        ret = [\n            {\n                p: .5,\n                color: colorRange(.5)\n            }\n        ];\n    } else {\n        let step = 1 / (actualSteps - 1);\n        ret = Array.from({\n            length: actualSteps\n        }, (_, i)=>{\n            let p = i * step;\n            return {\n                p,\n                color: colorRange(p)\n            };\n        });\n    }\n    if (maxDeltaE > 0) {\n        // Iterate over all stops and find max deltaE\n        let maxDelta = ret.reduce((acc, cur, i)=>{\n            if (i === 0) {\n                return 0;\n            }\n            let ΔΕ = deltaE(cur.color, ret[i - 1].color, deltaEMethod);\n            return Math.max(acc, ΔΕ);\n        }, 0);\n        while(maxDelta > maxDeltaE){\n            // Insert intermediate stops and measure maxDelta again\n            // We need to do this for all pairs, otherwise the midpoint shifts\n            maxDelta = 0;\n            for(let i = 1; i < ret.length && ret.length < maxSteps; i++){\n                let prev = ret[i - 1];\n                let cur = ret[i];\n                let p = (cur.p + prev.p) / 2;\n                let color = colorRange(p);\n                maxDelta = Math.max(maxDelta, deltaE(color, prev.color), deltaE(color, cur.color));\n                ret.splice(i, 0, {\n                    p,\n                    color: colorRange(p)\n                });\n                i++;\n            }\n        }\n    }\n    ret = ret.map((a)=>a.color);\n    return ret;\n}\n/**\n * Interpolate to color2 and return a function that takes a 0-1 percentage\n * @param {Color | string | Function} color1 The first color or an existing range\n * @param {Color | string} [color2] If color1 is a color, this is the second color\n * @param {Object} [options={}]\n * @returns {Function} A function that takes a 0-1 percentage and returns a color\n */ function range(color1, color2, options = {}) {\n    if (isRange(color1)) {\n        // Tweaking existing range\n        let [r, options] = [\n            color1,\n            color2\n        ];\n        return range(...r.rangeArgs.colors, {\n            ...r.rangeArgs.options,\n            ...options\n        });\n    }\n    let { space, outputSpace, progression, premultiplied } = options;\n    color1 = getColor(color1);\n    color2 = getColor(color2);\n    // Make sure we're working on copies of these colors\n    color1 = clone(color1);\n    color2 = clone(color2);\n    let rangeArgs = {\n        colors: [\n            color1,\n            color2\n        ],\n        options\n    };\n    if (space) {\n        space = ColorSpace.get(space);\n    } else {\n        space = ColorSpace.registry[defaults.interpolationSpace] || color1.space;\n    }\n    outputSpace = outputSpace ? ColorSpace.get(outputSpace) : space;\n    color1 = to(color1, space);\n    color2 = to(color2, space);\n    // Gamut map to avoid areas of flat color\n    color1 = toGamut(color1);\n    color2 = toGamut(color2);\n    // Handle hue interpolation\n    // See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840\n    if (space.coords.h && space.coords.h.type === \"angle\") {\n        let arc = options.hue = options.hue || \"shorter\";\n        let hue = [\n            space,\n            \"h\"\n        ];\n        let [θ1, θ2] = [\n            get(color1, hue),\n            get(color2, hue)\n        ];\n        [θ1, θ2] = adjust(arc, [\n            θ1,\n            θ2\n        ]);\n        set(color1, hue, θ1);\n        set(color2, hue, θ2);\n    }\n    if (premultiplied) {\n        // not coping with polar spaces yet\n        color1.coords = color1.coords.map((c)=>c * color1.alpha);\n        color2.coords = color2.coords.map((c)=>c * color2.alpha);\n    }\n    return Object.assign((p)=>{\n        p = progression ? progression(p) : p;\n        let coords = color1.coords.map((start, i)=>{\n            let end = color2.coords[i];\n            return interpolate(start, end, p);\n        });\n        let alpha = interpolate(color1.alpha, color2.alpha, p);\n        let ret = {\n            space,\n            coords,\n            alpha\n        };\n        if (premultiplied) {\n            // undo premultiplication\n            ret.coords = ret.coords.map((c)=>c / alpha);\n        }\n        if (outputSpace !== space) {\n            ret = to(ret, outputSpace);\n        }\n        return ret;\n    }, {\n        rangeArgs\n    });\n}\nfunction isRange(val) {\n    return type(val) === \"function\" && !!val.rangeArgs;\n}\ndefaults.interpolationSpace = \"lab\";\nfunction register(Color) {\n    Color.defineFunction(\"mix\", mix, {\n        returns: \"color\"\n    });\n    Color.defineFunction(\"range\", range, {\n        returns: \"function<color>\"\n    });\n    Color.defineFunction(\"steps\", steps, {\n        returns: \"array<color>\"\n    });\n}\nvar interpolation = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isRange: isRange,\n    mix: mix,\n    range: range,\n    register: register,\n    steps: steps\n});\nvar HSL = new ColorSpace({\n    id: \"hsl\",\n    name: \"HSL\",\n    coords: {\n        h: {\n            refRange: [\n                0,\n                360\n            ],\n            type: \"angle\",\n            name: \"Hue\"\n        },\n        s: {\n            range: [\n                0,\n                100\n            ],\n            name: \"Saturation\"\n        },\n        l: {\n            range: [\n                0,\n                100\n            ],\n            name: \"Lightness\"\n        }\n    },\n    base: sRGB,\n    // Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB\n    fromBase: (rgb)=>{\n        let max = Math.max(...rgb);\n        let min = Math.min(...rgb);\n        let [r, g, b] = rgb;\n        let [h, s, l] = [\n            NaN,\n            0,\n            (min + max) / 2\n        ];\n        let d = max - min;\n        if (d !== 0) {\n            s = l === 0 || l === 1 ? 0 : (max - l) / Math.min(l, 1 - l);\n            switch(max){\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n            }\n            h = h * 60;\n        }\n        return [\n            h,\n            s * 100,\n            l * 100\n        ];\n    },\n    // Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\n    toBase: (hsl)=>{\n        let [h, s, l] = hsl;\n        h = h % 360;\n        if (h < 0) {\n            h += 360;\n        }\n        s /= 100;\n        l /= 100;\n        function f(n) {\n            let k = (n + h / 30) % 12;\n            let a = s * Math.min(l, 1 - l);\n            return l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n        }\n        return [\n            f(0),\n            f(8),\n            f(4)\n        ];\n    },\n    formats: {\n        \"hsl\": {\n            toGamut: true,\n            coords: [\n                \"<number> | <angle>\",\n                \"<percentage>\",\n                \"<percentage>\"\n            ]\n        },\n        \"hsla\": {\n            coords: [\n                \"<number> | <angle>\",\n                \"<percentage>\",\n                \"<percentage>\"\n            ],\n            commas: true,\n            lastAlpha: true\n        }\n    }\n});\n// The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\nvar HSV = new ColorSpace({\n    id: \"hsv\",\n    name: \"HSV\",\n    coords: {\n        h: {\n            refRange: [\n                0,\n                360\n            ],\n            type: \"angle\",\n            name: \"Hue\"\n        },\n        s: {\n            range: [\n                0,\n                100\n            ],\n            name: \"Saturation\"\n        },\n        v: {\n            range: [\n                0,\n                100\n            ],\n            name: \"Value\"\n        }\n    },\n    base: HSL,\n    // https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\n    fromBase (hsl) {\n        let [h, s, l] = hsl;\n        s /= 100;\n        l /= 100;\n        let v = l + s * Math.min(l, 1 - l);\n        return [\n            h,\n            v === 0 ? 0 : 200 * (1 - l / v),\n            100 * v\n        ];\n    },\n    // https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\n    toBase (hsv) {\n        let [h, s, v] = hsv;\n        s /= 100;\n        v /= 100;\n        let l = v * (1 - s / 2);\n        return [\n            h,\n            l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l) * 100,\n            l * 100\n        ];\n    },\n    formats: {\n        color: {\n            toGamut: true\n        }\n    }\n});\n// The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\nvar hwb = new ColorSpace({\n    id: \"hwb\",\n    name: \"HWB\",\n    coords: {\n        h: {\n            refRange: [\n                0,\n                360\n            ],\n            type: \"angle\",\n            name: \"Hue\"\n        },\n        w: {\n            range: [\n                0,\n                100\n            ],\n            name: \"Whiteness\"\n        },\n        b: {\n            range: [\n                0,\n                100\n            ],\n            name: \"Blackness\"\n        }\n    },\n    base: HSV,\n    fromBase (hsv) {\n        let [h, s, v] = hsv;\n        return [\n            h,\n            v * (100 - s) / 100,\n            100 - v\n        ];\n    },\n    toBase (hwb) {\n        let [h, w, b] = hwb;\n        // Now convert percentages to [0..1]\n        w /= 100;\n        b /= 100;\n        // Achromatic check (white plus black >= 1)\n        let sum = w + b;\n        if (sum >= 1) {\n            let gray = w / sum;\n            return [\n                h,\n                0,\n                gray * 100\n            ];\n        }\n        let v = 1 - b;\n        let s = v === 0 ? 0 : 1 - w / v;\n        return [\n            h,\n            s * 100,\n            v * 100\n        ];\n    },\n    formats: {\n        \"hwb\": {\n            toGamut: true,\n            coords: [\n                \"<number> | <angle>\",\n                \"<percentage>\",\n                \"<percentage>\"\n            ]\n        }\n    }\n});\n// convert an array of linear-light a98-rgb values to CIE XYZ\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n// has greater numerical precision than section 4.3.5.3 of\n// https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf\n// but the values below were calculated from first principles\n// from the chromaticity coordinates of R G B W\nconst toXYZ_M$2 = [\n    [\n        0.5766690429101305,\n        0.1855582379065463,\n        0.1882286462349947\n    ],\n    [\n        0.29734497525053605,\n        0.6273635662554661,\n        0.07529145849399788\n    ],\n    [\n        0.02703136138641234,\n        0.07068885253582723,\n        0.9913375368376388\n    ]\n];\nconst fromXYZ_M$2 = [\n    [\n        2.0415879038107465,\n        -0.5650069742788596,\n        -0.34473135077832956\n    ],\n    [\n        -0.9692436362808795,\n        1.8759675015077202,\n        0.04155505740717557\n    ],\n    [\n        0.013444280632031142,\n        -0.11836239223101838,\n        1.0151749943912054\n    ]\n];\nvar A98Linear = new RGBColorSpace({\n    id: \"a98rgb-linear\",\n    name: \"Linear Adobe\\xae 98 RGB compatible\",\n    white: \"D65\",\n    toXYZ_M: toXYZ_M$2,\n    fromXYZ_M: fromXYZ_M$2\n});\nvar a98rgb = new RGBColorSpace({\n    id: \"a98rgb\",\n    name: \"Adobe\\xae 98 RGB compatible\",\n    base: A98Linear,\n    toBase: (RGB)=>RGB.map((val)=>Math.pow(Math.abs(val), 563 / 256) * Math.sign(val)),\n    fromBase: (RGB)=>RGB.map((val)=>Math.pow(Math.abs(val), 256 / 563) * Math.sign(val)),\n    formats: {\n        color: {\n            id: \"a98-rgb\"\n        }\n    }\n});\n// convert an array of  prophoto-rgb values to CIE XYZ\n// using  D50 (so no chromatic adaptation needed afterwards)\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\nconst toXYZ_M$1 = [\n    [\n        0.7977604896723027,\n        0.13518583717574031,\n        0.0313493495815248\n    ],\n    [\n        0.2880711282292934,\n        0.7118432178101014,\n        0.00008565396060525902\n    ],\n    [\n        0.0,\n        0.0,\n        0.8251046025104601\n    ]\n];\nconst fromXYZ_M$1 = [\n    [\n        1.3457989731028281,\n        -0.25558010007997534,\n        -0.05110628506753401\n    ],\n    [\n        -0.5446224939028347,\n        1.5082327413132781,\n        0.02053603239147973\n    ],\n    [\n        0.0,\n        0.0,\n        1.2119675456389454\n    ]\n];\nvar ProPhotoLinear = new RGBColorSpace({\n    id: \"prophoto-linear\",\n    name: \"Linear ProPhoto\",\n    white: \"D50\",\n    base: XYZ_D50,\n    toXYZ_M: toXYZ_M$1,\n    fromXYZ_M: fromXYZ_M$1\n});\nconst Et = 1 / 512;\nconst Et2 = 16 / 512;\nvar prophoto = new RGBColorSpace({\n    id: \"prophoto\",\n    name: \"ProPhoto\",\n    base: ProPhotoLinear,\n    toBase (RGB) {\n        // Transfer curve is gamma 1.8 with a small linear portion\n        return RGB.map((v)=>v < Et2 ? v / 16 : v ** 1.8);\n    },\n    fromBase (RGB) {\n        return RGB.map((v)=>v >= Et ? v ** (1 / 1.8) : 16 * v);\n    },\n    formats: {\n        color: {\n            id: \"prophoto-rgb\"\n        }\n    }\n});\nvar oklch = new ColorSpace({\n    id: \"oklch\",\n    name: \"Oklch\",\n    coords: {\n        l: {\n            refRange: [\n                0,\n                1\n            ],\n            name: \"Lightness\"\n        },\n        c: {\n            refRange: [\n                0,\n                0.4\n            ],\n            name: \"Chroma\"\n        },\n        h: {\n            refRange: [\n                0,\n                360\n            ],\n            type: \"angle\",\n            name: \"Hue\"\n        }\n    },\n    white: \"D65\",\n    base: OKLab,\n    fromBase (oklab) {\n        // Convert to polar form\n        let [L, a, b] = oklab;\n        let h;\n        const ε = 0.0002; // chromatic components much smaller than a,b\n        if (Math.abs(a) < ε && Math.abs(b) < ε) {\n            h = NaN;\n        } else {\n            h = Math.atan2(b, a) * 180 / Math.PI;\n        }\n        return [\n            L,\n            Math.sqrt(a ** 2 + b ** 2),\n            constrain(h) // Hue, in degrees [0 to 360)\n        ];\n    },\n    // Convert from polar form\n    toBase (oklch) {\n        let [L, C, h] = oklch;\n        let a, b;\n        // check for NaN hue\n        if (isNaN(h)) {\n            a = 0;\n            b = 0;\n        } else {\n            a = C * Math.cos(h * Math.PI / 180);\n            b = C * Math.sin(h * Math.PI / 180);\n        }\n        return [\n            L,\n            a,\n            b\n        ];\n    },\n    formats: {\n        \"oklch\": {\n            coords: [\n                \"<number> | <percentage>\",\n                \"<number> | <percentage>[0,1]\",\n                \"<number> | <angle>\"\n            ]\n        }\n    }\n});\nconst Yw = 203; // absolute luminance of media white, cd/m²\nconst n = 2610 / 2 ** 14;\nconst ninv = 2 ** 14 / 2610;\nconst m = 2523 / 2 ** 5;\nconst minv = 2 ** 5 / 2523;\nconst c1 = 3424 / 2 ** 12;\nconst c2 = 2413 / 2 ** 7;\nconst c3 = 2392 / 2 ** 7;\nvar rec2100Pq = new RGBColorSpace({\n    id: \"rec2100pq\",\n    name: \"REC.2100-PQ\",\n    base: REC2020Linear,\n    toBase (RGB) {\n        // given PQ encoded component in range [0, 1]\n        // return media-white relative linear-light\n        return RGB.map(function(val) {\n            let x = (Math.max(val ** minv - c1, 0) / (c2 - c3 * val ** minv)) ** ninv;\n            return x * 10000 / Yw; // luminance relative to diffuse white, [0, 70 or so].\n        });\n    },\n    fromBase (RGB) {\n        // given media-white relative linear-light\n        // returnPQ encoded component in range [0, 1]\n        return RGB.map(function(val) {\n            let x = Math.max(val * Yw / 10000, 0); // absolute luminance of peak white is 10,000 cd/m².\n            let num = c1 + c2 * x ** n;\n            let denom = 1 + c3 * x ** n;\n            return (num / denom) ** m;\n        });\n    },\n    formats: {\n        color: {\n            id: \"rec2100-pq\"\n        }\n    }\n});\n// FIXME see https://github.com/LeaVerou/color.js/issues/190\nconst a = 0.17883277;\nconst b = 0.28466892; // 1 - (4 * a)\nconst c = 0.55991073; // 0.5 - a * Math.log(4 *a)\nconst scale = 3.7743; // Place 18% grey at HLG 0.38, so media white at 0.75\nvar rec2100Hlg = new RGBColorSpace({\n    id: \"rec2100hlg\",\n    cssid: \"rec2100-hlg\",\n    name: \"REC.2100-HLG\",\n    referred: \"scene\",\n    base: REC2020Linear,\n    toBase (RGB) {\n        // given HLG encoded component in range [0, 1]\n        // return media-white relative linear-light\n        return RGB.map(function(val) {\n            // first the HLG EOTF\n            // ITU-R BT.2390-10 p.30 section\n            // 6.3 The hybrid log-gamma electro-optical transfer function (EOTF)\n            // Then scale by 3 so media white is 1.0\n            if (val <= 0.5) {\n                return val ** 2 / 3 * scale;\n            }\n            return (Math.exp((val - c) / a) + b) / 12 * scale;\n        });\n    },\n    fromBase (RGB) {\n        // given media-white relative linear-light\n        // where diffuse white is 1.0,\n        // return HLG encoded component in range [0, 1]\n        return RGB.map(function(val) {\n            // first scale to put linear-light media white at 1/3\n            val /= scale;\n            // now the HLG OETF\n            // ITU-R BT.2390-10 p.23\n            // 6.1 The hybrid log-gamma opto-electronic transfer function (OETF)\n            if (val <= 1 / 12) {\n                return Math.sqrt(3 * val);\n            }\n            return a * Math.log(12 * val - b) + c;\n        });\n    },\n    formats: {\n        color: {\n            id: \"rec2100-hlg\"\n        }\n    }\n});\nconst CATs = {};\nhooks.add(\"chromatic-adaptation-start\", (env)=>{\n    if (env.options.method) {\n        env.M = adapt(env.W1, env.W2, env.options.method);\n    }\n});\nhooks.add(\"chromatic-adaptation-end\", (env)=>{\n    if (!env.M) {\n        env.M = adapt(env.W1, env.W2, env.options.method);\n    }\n});\nfunction defineCAT({ id, toCone_M, fromCone_M }) {\n    // Use id, toCone_M, fromCone_M like variables\n    CATs[id] = arguments[0];\n}\nfunction adapt(W1, W2, id = \"Bradford\") {\n    // adapt from a source whitepoint or illuminant W1\n    // to a destination whitepoint or illuminant W2,\n    // using the given chromatic adaptation transform (CAT)\n    // debugger;\n    let method = CATs[id];\n    let [ρs, γs, βs] = multiplyMatrices(method.toCone_M, W1);\n    let [ρd, γd, βd] = multiplyMatrices(method.toCone_M, W2);\n    // all practical illuminants have non-zero XYZ so no division by zero can occur below\n    let scale = [\n        [\n            ρd / ρs,\n            0,\n            0\n        ],\n        [\n            0,\n            γd / γs,\n            0\n        ],\n        [\n            0,\n            0,\n            βd / βs\n        ]\n    ];\n    // console.log({scale});\n    let scaled_cone_M = multiplyMatrices(scale, method.toCone_M);\n    let adapt_M = multiplyMatrices(method.fromCone_M, scaled_cone_M);\n    // console.log({scaled_cone_M, adapt_M});\n    return adapt_M;\n}\ndefineCAT({\n    id: \"von Kries\",\n    toCone_M: [\n        [\n            0.4002400,\n            0.7076000,\n            -0.0808100\n        ],\n        [\n            -0.2263000,\n            1.1653200,\n            0.0457000\n        ],\n        [\n            0.0000000,\n            0.0000000,\n            0.9182200\n        ]\n    ],\n    fromCone_M: [\n        [\n            1.8599364,\n            -1.1293816,\n            0.2198974\n        ],\n        [\n            0.3611914,\n            0.6388125,\n            -0.0000064\n        ],\n        [\n            0.0000000,\n            0.0000000,\n            1.0890636\n        ]\n    ]\n});\ndefineCAT({\n    id: \"Bradford\",\n    // Convert an array of XYZ values in the range 0.0 - 1.0\n    // to cone fundamentals\n    toCone_M: [\n        [\n            0.8951000,\n            0.2664000,\n            -0.1614000\n        ],\n        [\n            -0.7502000,\n            1.7135000,\n            0.0367000\n        ],\n        [\n            0.0389000,\n            -0.0685000,\n            1.0296000\n        ]\n    ],\n    // and back\n    fromCone_M: [\n        [\n            0.9869929,\n            -0.1470543,\n            0.1599627\n        ],\n        [\n            0.4323053,\n            0.5183603,\n            0.0492912\n        ],\n        [\n            -0.0085287,\n            0.0400428,\n            0.9684867\n        ]\n    ]\n});\ndefineCAT({\n    id: \"CAT02\",\n    // with complete chromatic adaptation to W2, so D = 1.0\n    toCone_M: [\n        [\n            0.7328000,\n            0.4296000,\n            -0.1624000\n        ],\n        [\n            -0.7036000,\n            1.6975000,\n            0.0061000\n        ],\n        [\n            0.0030000,\n            0.0136000,\n            0.9834000\n        ]\n    ],\n    fromCone_M: [\n        [\n            1.0961238,\n            -0.2788690,\n            0.1827452\n        ],\n        [\n            0.4543690,\n            0.4735332,\n            0.0720978\n        ],\n        [\n            -0.0096276,\n            -0.0056980,\n            1.0153256\n        ]\n    ]\n});\ndefineCAT({\n    id: \"CAT16\",\n    toCone_M: [\n        [\n            0.401288,\n            0.650173,\n            -0.051461\n        ],\n        [\n            -0.250268,\n            1.204414,\n            0.045854\n        ],\n        [\n            -0.002079,\n            0.048952,\n            0.953127\n        ]\n    ],\n    // the extra precision is needed to avoid roundtripping errors\n    fromCone_M: [\n        [\n            1.862067855087233e+0,\n            -1.011254630531685e+0,\n            1.491867754444518e-1\n        ],\n        [\n            3.875265432361372e-1,\n            6.214474419314753e-1,\n            -8.973985167612518e-3\n        ],\n        [\n            -1.584149884933386e-2,\n            -3.412293802851557e-2,\n            1.049964436877850e+0\n        ]\n    ]\n});\nObject.assign(WHITES, {\n    // whitepoint values from ASTM E308-01 with 10nm spacing, 1931 2 degree observer\n    // all normalized to Y (luminance) = 1.00000\n    // Illuminant A is a tungsten electric light, giving a very warm, orange light.\n    A: [\n        1.09850,\n        1.00000,\n        0.35585\n    ],\n    // Illuminant C was an early approximation to daylight: illuminant A with a blue filter.\n    C: [\n        0.98074,\n        1.000000,\n        1.18232\n    ],\n    // The daylight series of illuminants simulate natural daylight.\n    // The color temperature (in degrees Kelvin/100) ranges from\n    // cool, overcast daylight (D50) to bright, direct sunlight (D65).\n    D55: [\n        0.95682,\n        1.00000,\n        0.92149\n    ],\n    D75: [\n        0.94972,\n        1.00000,\n        1.22638\n    ],\n    // Equal-energy illuminant, used in two-stage CAT16\n    E: [\n        1.00000,\n        1.00000,\n        1.00000\n    ],\n    // The F series of illuminants represent fluorescent lights\n    F2: [\n        0.99186,\n        1.00000,\n        0.67393\n    ],\n    F7: [\n        0.95041,\n        1.00000,\n        1.08747\n    ],\n    F11: [\n        1.00962,\n        1.00000,\n        0.64350\n    ]\n});\n// The ACES whitepoint\n// see TB-2018-001 Derivation of the ACES White Point CIE Chromaticity Coordinates\n// also https://github.com/ampas/aces-dev/blob/master/documents/python/TB-2018-001/aces_wp.py\n// Similar to D60\nWHITES.ACES = [\n    0.32168 / 0.33767,\n    1.00000,\n    (1.00000 - 0.32168 - 0.33767) / 0.33767\n];\n// convert an array of linear-light ACEScc values to CIE XYZ\nconst toXYZ_M = [\n    [\n        0.6624541811085053,\n        0.13400420645643313,\n        0.1561876870049078\n    ],\n    [\n        0.27222871678091454,\n        0.6740817658111484,\n        0.05368951740793705\n    ],\n    [\n        -0.005574649490394108,\n        0.004060733528982826,\n        1.0103391003129971\n    ]\n];\nconst fromXYZ_M = [\n    [\n        1.6410233796943257,\n        -0.32480329418479,\n        -0.23642469523761225\n    ],\n    [\n        -0.6636628587229829,\n        1.6153315916573379,\n        0.016756347685530137\n    ],\n    [\n        0.011721894328375376,\n        -0.008284441996237409,\n        0.9883948585390215\n    ]\n];\nvar ACEScg = new RGBColorSpace({\n    id: \"acescg\",\n    name: \"ACEScg\",\n    // ACEScg – A scene-referred, linear-light encoding of ACES Data\n    // https://docs.acescentral.com/specifications/acescg/\n    // uses the AP1 primaries, see section 4.3.1 Color primaries\n    coords: {\n        r: {\n            range: [\n                0,\n                65504\n            ],\n            name: \"Red\"\n        },\n        g: {\n            range: [\n                0,\n                65504\n            ],\n            name: \"Green\"\n        },\n        b: {\n            range: [\n                0,\n                65504\n            ],\n            name: \"Blue\"\n        }\n    },\n    referred: \"scene\",\n    white: WHITES.ACES,\n    toXYZ_M,\n    fromXYZ_M,\n    formats: {\n        color: {}\n    }\n});\n// export default Color;\nconst ε = 2 ** -16;\n// the smallest value which, in the 32bit IEEE 754 float encoding,\n// decodes as a non-negative value\nconst ACES_min_nonzero = -0.35828683;\n// brightest encoded value, decodes to 65504\nconst ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52; // 1.468\nvar acescc = new RGBColorSpace({\n    id: \"acescc\",\n    name: \"ACEScc\",\n    // see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data\n    // https://docs.acescentral.com/specifications/acescc/\n    // uses the AP1 primaries, see section 4.3.1 Color primaries\n    // Appendix A: \"Very small ACES scene referred values below 7 1/4 stops\n    // below 18% middle gray are encoded as negative ACEScc values.\n    // These values should be preserved per the encoding in Section 4.4\n    // so that all positive ACES values are maintained.\"\n    coords: {\n        r: {\n            range: [\n                ACES_min_nonzero,\n                ACES_cc_max\n            ],\n            name: \"Red\"\n        },\n        g: {\n            range: [\n                ACES_min_nonzero,\n                ACES_cc_max\n            ],\n            name: \"Green\"\n        },\n        b: {\n            range: [\n                ACES_min_nonzero,\n                ACES_cc_max\n            ],\n            name: \"Blue\"\n        }\n    },\n    referred: \"scene\",\n    base: ACEScg,\n    // from section 4.4.2 Decoding Function\n    toBase (RGB) {\n        const low = (9.72 - 15) / 17.52; // -0.3014\n        return RGB.map(function(val) {\n            if (val <= low) {\n                return (2 ** (val * 17.52 - 9.72) - ε) * 2; // very low values, below -0.3014\n            } else if (val < ACES_cc_max) {\n                return 2 ** (val * 17.52 - 9.72);\n            } else {\n                return 65504;\n            }\n        });\n    },\n    // Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function\n    fromBase (RGB) {\n        return RGB.map(function(val) {\n            if (val <= 0) {\n                return (Math.log2(ε) + 9.72) / 17.52; // -0.3584\n            } else if (val < ε) {\n                return (Math.log2(ε + val * 0.5) + 9.72) / 17.52;\n            } else {\n                return (Math.log2(val) + 9.72) / 17.52;\n            }\n        });\n    },\n    // encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]\n    // encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]\n    formats: {\n        color: {}\n    }\n});\nvar spaces = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    A98RGB: a98rgb,\n    A98RGB_Linear: A98Linear,\n    ACEScc: acescc,\n    ACEScg: ACEScg,\n    HSL: HSL,\n    HSV: HSV,\n    HWB: hwb,\n    ICTCP: ictcp,\n    JzCzHz: jzczhz,\n    Jzazbz: Jzazbz,\n    LCH: lch,\n    Lab: lab,\n    Lab_D65: lab_d65,\n    OKLCH: oklch,\n    OKLab: OKLab,\n    P3: P3,\n    P3_Linear: P3Linear,\n    ProPhoto: prophoto,\n    ProPhoto_Linear: ProPhotoLinear,\n    REC_2020: REC2020,\n    REC_2020_Linear: REC2020Linear,\n    REC_2100_HLG: rec2100Hlg,\n    REC_2100_PQ: rec2100Pq,\n    XYZ_ABS_D65: XYZ_Abs_D65,\n    XYZ_D50: XYZ_D50,\n    XYZ_D65: XYZ_D65,\n    sRGB: sRGB,\n    sRGB_Linear: sRGBLinear\n});\n/**\n * Class that represents a color\n */ class Color {\n    /**\n\t * Creates an instance of Color.\n\t * Signatures:\n\t * - `new Color(stringToParse)`\n\t * - `new Color(otherColor)`\n\t * - `new Color({space, coords, alpha})`\n\t * - `new Color(space, coords, alpha)`\n\t * - `new Color(spaceId, coords, alpha)`\n\t */ constructor(...args){\n        let color;\n        if (args.length === 1) {\n            color = getColor(args[0]);\n        }\n        let space, coords, alpha;\n        if (color) {\n            space = color.space || color.spaceId;\n            coords = color.coords;\n            alpha = color.alpha;\n        } else {\n            // default signature new Color(ColorSpace, array [, alpha])\n            [space, coords, alpha] = args;\n        }\n        Object.defineProperty(this, \"space\", {\n            value: ColorSpace.get(space),\n            writable: false,\n            enumerable: true,\n            configurable: true\n        });\n        this.coords = coords ? coords.slice() : [\n            0,\n            0,\n            0\n        ];\n        this.alpha = alpha < 1 ? alpha : 1; // this also deals with NaN etc\n        // Convert \"NaN\" to NaN\n        for(let i = 0; i < this.coords.length; i++){\n            if (this.coords[i] === \"NaN\") {\n                this.coords[i] = NaN;\n            }\n        }\n        // Define getters and setters for each coordinate\n        for(let id in this.space.coords){\n            Object.defineProperty(this, id, {\n                get: ()=>this.get(id),\n                set: (value)=>this.set(id, value)\n            });\n        }\n    }\n    get spaceId() {\n        return this.space.id;\n    }\n    clone() {\n        return new Color(this.space, this.coords, this.alpha);\n    }\n    toJSON() {\n        return {\n            spaceId: this.spaceId,\n            coords: this.coords,\n            alpha: this.alpha\n        };\n    }\n    display(...args) {\n        let ret = display(this, ...args);\n        // Convert color object to Color instance\n        ret.color = new Color(ret.color);\n        return ret;\n    }\n    /**\n\t * Get a color from the argument passed\n\t * Basically gets us the same result as new Color(color) but doesn't clone an existing color object\n\t */ static get(color, ...args) {\n        if (color instanceof Color) {\n            return color;\n        }\n        return new Color(color, ...args);\n    }\n    static defineFunction(name, code, o = code) {\n        let { instance = true, returns } = o;\n        let func = function(...args) {\n            let ret = code(...args);\n            if (returns === \"color\") {\n                ret = Color.get(ret);\n            } else if (returns === \"function<color>\") {\n                let f = ret;\n                ret = function(...args) {\n                    let ret = f(...args);\n                    return Color.get(ret);\n                };\n                // Copy any function metadata\n                Object.assign(ret, f);\n            } else if (returns === \"array<color>\") {\n                ret = ret.map((c)=>Color.get(c));\n            }\n            return ret;\n        };\n        if (!(name in Color)) {\n            Color[name] = func;\n        }\n        if (instance) {\n            Color.prototype[name] = function(...args) {\n                return func(this, ...args);\n            };\n        }\n    }\n    static defineFunctions(o) {\n        for(let name in o){\n            Color.defineFunction(name, o[name], o[name]);\n        }\n    }\n    static extend(exports) {\n        if (exports.register) {\n            exports.register(Color);\n        } else {\n            // No register method, just add the module's functions\n            for(let name in exports){\n                Color.defineFunction(name, exports[name]);\n            }\n        }\n    }\n}\nColor.defineFunctions({\n    get,\n    getAll,\n    set,\n    setAll,\n    to,\n    equals,\n    inGamut,\n    toGamut,\n    distance,\n    toString: serialize\n});\nObject.assign(Color, {\n    util,\n    hooks,\n    WHITES,\n    Space: ColorSpace,\n    spaces: ColorSpace.registry,\n    parse,\n    // Global defaults one may want to configure\n    defaults\n});\nfor (let key of Object.keys(spaces)){\n    ColorSpace.register(spaces[key]);\n}\n/**\n * This plugin defines getters and setters for color[spaceId]\n * e.g. color.lch on *any* color gives us the lch coords\n */ // Add space accessors to existing color spaces\nfor(let id in ColorSpace.registry){\n    addSpaceAccessors(id, ColorSpace.registry[id]);\n}\n// Add space accessors to color spaces not yet created\nhooks.add(\"colorspace-init-end\", (space)=>{\n    addSpaceAccessors(space.id, space);\n    space.aliases?.forEach((alias)=>{\n        addSpaceAccessors(alias, space);\n    });\n});\nfunction addSpaceAccessors(id, space) {\n    // Coordinates can be looked up by both id and name\n    Object.keys(space.coords);\n    Object.values(space.coords).map((c)=>c.name);\n    let propId = id.replace(/-/g, \"_\");\n    Object.defineProperty(Color.prototype, propId, {\n        // Convert coords to coords in another colorspace and return them\n        // Source colorspace: this.spaceId\n        // Target colorspace: id\n        get () {\n            let ret = this.getAll(id);\n            if (typeof Proxy === \"undefined\") {\n                // If proxies are not supported, just return a static array\n                return ret;\n            }\n            // Enable color.spaceId.coordName syntax\n            return new Proxy(ret, {\n                has: (obj, property)=>{\n                    try {\n                        ColorSpace.resolveCoord([\n                            space,\n                            property\n                        ]);\n                        return true;\n                    } catch (e) {}\n                    return Reflect.has(obj, property);\n                },\n                get: (obj, property, receiver)=>{\n                    if (property && typeof property !== \"symbol\" && !(property in obj)) {\n                        let { index } = ColorSpace.resolveCoord([\n                            space,\n                            property\n                        ]);\n                        if (index >= 0) {\n                            return obj[index];\n                        }\n                    }\n                    return Reflect.get(obj, property, receiver);\n                },\n                set: (obj, property, value, receiver)=>{\n                    if (property && typeof property !== \"symbol\" && !(property in obj) || property >= 0) {\n                        let { index } = ColorSpace.resolveCoord([\n                            space,\n                            property\n                        ]);\n                        if (index >= 0) {\n                            obj[index] = value;\n                            // Update color.coords\n                            this.setAll(id, obj);\n                            return true;\n                        }\n                    }\n                    return Reflect.set(obj, property, value, receiver);\n                }\n            });\n        },\n        // Convert coords in another colorspace to internal coords and set them\n        // Target colorspace: this.spaceId\n        // Source colorspace: id\n        set (coords) {\n            this.setAll(id, coords);\n        },\n        configurable: true,\n        enumerable: true\n    });\n}\n// Import all modules of Color.js\nColor.extend(deltaEMethods);\nColor.extend({\n    deltaE\n});\nObject.assign(Color, {\n    deltaEMethods\n});\nColor.extend(variations);\nColor.extend({\n    contrast\n});\nColor.extend(chromaticity);\nColor.extend(luminance);\nColor.extend(interpolation);\nColor.extend(contrastMethods);\n //# sourceMappingURL=color.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/colorjs.io/dist/color.js\n");

/***/ })

};
;